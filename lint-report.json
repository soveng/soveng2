yarn run v1.22.22
$ eslint . --ext .js,.jsx,.ts,.tsx,.astro -f json
[{"filePath":"/Users/gigi/Development/soveng/soveng2/src/content.config.ts","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module 'astro:content'.","line":2,"column":37,"nodeType":"Literal","endLine":2,"endColumn":52}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { glob } from \"astro/loaders\";\nimport { defineCollection, z } from \"astro:content\";\n\n// Homepage collection schema\nconst homepageCollection = defineCollection({\n  loader: glob({ pattern: \"**/-*.{md,mdx}\", base: \"src/content/homepage\" }),\n  schema: z.object({\n    banner: z.object({\n      title: z.string(),\n      content: z.string(),\n      image: z.string(),\n      button: z.object({\n        enable: z.boolean(),\n        label: z.string(),\n        link: z.string(),\n      }),\n    }),\n    features: z.array(\n      z.object({\n        title: z.string(),\n        image: z.string(),\n        content: z.string(),\n        bulletpoints: z.array(z.string()),\n        button: z.object({\n          enable: z.boolean(),\n          label: z.string(),\n          link: z.string(),\n        }),\n      }),\n    ),\n  }),\n});\n\n// Philosophy collection schema\nconst philosophyCollection = defineCollection({\n  loader: glob({ pattern: \"**/-*.{md,mdx}\", base: \"src/content/philosophy\" }),\n  schema: z.object({\n    title: z.string(),\n    meta_title: z.string().optional(),\n    description: z.string().optional(),\n    intro: z.object({\n      quote_section: z.string(),\n      content: z.string(),\n      image: z.string(),\n    }),\n    sections: z.array(\n      z.object({\n        id: z.string(),\n        title: z.string(),\n        quote_section: z.string(),\n        image: z.string(),\n        float: z.string(),\n        content: z.string(),\n        link: z.string().optional(),\n      }),\n    ),\n    cta: z.object({\n      text: z.string(),\n      link: z.string(),\n    }),\n  }),\n});\n\n// Concept collection schema\nconst conceptCollection = defineCollection({\n  loader: glob({ pattern: \"**/-*.{md,mdx}\", base: \"src/content/concept\" }),\n  schema: z.object({\n    title: z.string(),\n    meta_title: z.string().optional(),\n    description: z.string().optional(),\n    intro: z.object({\n      content: z.string(),\n      image: z.string(),\n    }),\n    sections: z.array(\n      z.object({\n        id: z.string(),\n        title: z.string(),\n        content: z.string(),\n        image: z.string().optional(),\n        float: z.string().optional(),\n      }),\n    ),\n    cta: z.object({\n      text: z.string(),\n      link: z.string(),\n    }),\n  }),\n});\n\n// FAQ collection schema\nconst faqCollection = defineCollection({\n  loader: glob({ pattern: \"**/-*.{md,mdx}\", base: \"src/content/faq\" }),\n  schema: z.object({\n    title: z.string(),\n    meta_title: z.string().optional(),\n    description: z.string().optional(),\n    intro: z.object({\n      content: z.string(),\n    }),\n    sections: z.array(\n      z.object({\n        id: z.string(),\n        title: z.string(),\n        questions: z.array(\n          z.object({\n            question: z.string(),\n            answer: z.string(),\n          }),\n        ).optional(),\n        content: z.string().optional(),\n      }),\n    ),\n    cta: z.object({\n      text: z.string(),\n      link: z.string(),\n    }),\n  }),\n});\n\n// Call to Action collection schema\nconst ctaSectionCollection = defineCollection({\n  loader: glob({\n    pattern: \"call-to-action.{md,mdx}\",\n    base: \"src/content/sections\",\n  }),\n  schema: z.object({\n    enable: z.boolean(),\n    title: z.string(),\n    description: z.string(),\n    image: z.string(),\n    button: z.object({\n      enable: z.boolean(),\n      label: z.string(),\n      link: z.string(),\n    }),\n    dates: z.string().optional(),\n  }),\n});\n\n// Testimonials Section collection schema\nconst testimonialSectionCollection = defineCollection({\n  loader: glob({\n    pattern: \"testimonial.{md,mdx}\",\n    base: \"src/content/sections\",\n  }),\n  schema: z.object({\n    enable: z.boolean(),\n    title: z.string(),\n    description: z.string(),\n    testimonials: z.array(\n      z.object({\n        name: z.string(),\n        avatar: z.string(),\n        designation: z.string(),\n        npub: z.string().optional(),\n        noteid: z.string().optional(),\n        content: z.string(),\n      }),\n    ),\n  }),\n});\n\n// Export collections\nexport const collections = {\n  // Pages\n  homepage: homepageCollection,\n  philosophy: philosophyCollection,\n  concept: conceptCollection,\n  faq: faqCollection,\n\n  // sections\n  ctaSection: ctaSectionCollection,\n  testimonialSection: testimonialSectionCollection,\n};\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]}]},{"filePath":"/Users/gigi/Development/soveng/soveng2/src/data/showcaseProjects.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]}]},{"filePath":"/Users/gigi/Development/soveng/soveng2/src/hooks/useTheme.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]}]},{"filePath":"/Users/gigi/Development/soveng/soveng2/src/layouts/Base.astro","messages":[{"ruleId":"max-len","severity":1,"message":"This line has a length of 106. Maximum allowed is 100.","line":43,"column":1,"nodeType":"Program","messageId":"max","endLine":43,"endColumn":107}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"---\nimport TwSizeIndicator from \"@/components/TwSizeIndicator.astro\";\nimport StickyNav from \"@/components/StickyNav.astro\";\nimport config from \"@/config/config.json\";\nimport theme from \"@/config/theme.json\";\nimport { plainify } from \"@/lib/utils/textConverter\";\nimport Footer from \"@/partials/Footer.astro\";\nimport CallToAction from \"@/partials/CallToAction.astro\";\nimport \"@/styles/main.css\";\nimport \"@fontsource/eb-garamond/400.css\";\nimport \"@fontsource/eb-garamond/400-italic.css\";\nimport \"@fontsource/im-fell-double-pica\";\nimport \"@fontsource/im-fell-double-pica/400-italic.css\";\nimport {\n  GoogleTagmanager,\n  GoogleTagmanagerNoscript,\n} from \"@digi4care/astro-google-tagmanager\";\nimport { ClientRouter } from \"astro:transitions\";\nimport type { CollectionEntry } from \"astro:content\";\nimport { getEntry } from \"astro:content\";\n\n// Get fonts directly from theme\nconst fontPrimary = theme.fonts.font_family.primary;\nconst fontSecondary = theme.fonts.font_family.secondary;\n\n// types for frontmatters\nexport interface Props {\n  title?: string;\n  meta_title?: string;\n  description?: string;\n  image?: string;\n  noindex?: boolean;\n  canonical?: string;\n  showCallToAction?: boolean;\n}\n\n// destructure frontmatter\nconst { title, meta_title, description, image, noindex, canonical, showCallToAction = true } =\n  Astro.props;\n\n// process text content\nconst processedTitle = await plainify(meta_title ? meta_title : title ? title : config.site.title);\nconst processedDescription = await plainify(description ? description : config.metadata.meta_description);\n\n// Get call-to-action data if needed\nconst call_to_action = showCallToAction ? (await getEntry(\n  \"ctaSection\",\n  \"call-to-action\"\n)) as CollectionEntry<\"ctaSection\"> : null;\n---\n\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <!-- google tag manager -->\n    {\n      config.google_tag_manager.enable && (\n        <GoogleTagmanager id={config.google_tag_manager.gtm_id} />\n      )\n    }\n    <!-- favicon -->\n    <link rel=\"shortcut icon\" href={config.site.favicon} />\n    <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/images/favicons/favicon-32x32.png\" />\n    <link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/images/favicons/favicon-16x16.png\" />\n    <link rel=\"manifest\" href=\"/images/favicons/site.webmanifest\" />\n    <link rel=\"apple-touch-icon\" href=\"/images/favicons/apple-touch-icon.png\" />\n    <link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/images/favicons/apple-touch-icon.png\" />\n    <!-- theme meta -->\n    <meta name=\"theme-name\" content=\"astroplate\" />\n    <meta name=\"msapplication-TileColor\" content=\"#000000\" />\n    <meta\n      name=\"theme-color\"\n      media=\"(prefers-color-scheme: light)\"\n      content=\"#fff\"\n    />\n    <meta\n      name=\"theme-color\"\n      media=\"(prefers-color-scheme: dark)\"\n      content=\"#000\"\n    />\n    <meta name=\"generator\" content={Astro.generator} />\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n    <meta name=\"referrer\" content=\"strict-origin-when-cross-origin\" />\n    <meta name=\"format-detection\" content=\"telephone=no\" />\n    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />\n    <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\" />\n    <meta name=\"apple-mobile-web-app-title\" content=\"Sovereign Engineering\" />\n\n    <!-- Font variables from theme -->\n    <style define:vars={{ fontPrimary, fontSecondary }}>\n      :root {\n        --font-primary: var(--fontPrimary);\n        --font-secondary: var(--fontSecondary);\n      }\n    </style>\n\n    <!-- responsive meta -->\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, maximum-scale=5\"\n    />\n\n    <!-- title -->\n    <title>\n      {processedTitle}\n    </title>\n\n    <!-- canonical url -->\n    {canonical && <link rel=\"canonical\" href={canonical} item-prop=\"url\" />}\n\n    <!-- noindex robots -->\n    {noindex && <meta name=\"robots\" content=\"noindex,nofollow\" />}\n\n    <!-- meta-description -->\n    <meta\n      name=\"description\"\n      content={processedDescription}\n    />\n\n    <!-- Additional SEO Meta Tags -->\n    <meta name=\"keywords\" content=\"sovereign engineering, bitcoin, nostr, blossom, nutzaps, wikifreedia, nsites, tollgate, zapstore, decentralized, privacy, sovereignty\" />\n    <meta name=\"robots\" content=\"index, follow, max-image-preview:large, max-snippet:-1, max-video-preview:-1\" />\n    <meta name=\"googlebot\" content=\"index, follow\" />\n\n    <ClientRouter />\n\n    <!-- author from config.json -->\n    <meta name=\"author\" content={config.metadata.meta_author} />\n\n    <!-- og-title -->\n    <meta\n      property=\"og:title\"\n      content={processedTitle}\n    />\n\n    <!-- og-description -->\n    <meta\n      property=\"og:description\"\n      content={processedDescription}\n    />\n    <meta property=\"og:type\" content=\"website\" />\n    <meta\n      property=\"og:url\"\n      content={`${config.site.base_url}/${Astro.url.pathname.replace(\"/\", \"\")}`}\n    />\n\n    <!-- twitter-title -->\n    <meta\n      name=\"twitter:title\"\n      content={processedTitle}\n    />\n\n    <!-- twitter-description -->\n    <meta\n      name=\"twitter:description\"\n      content={processedDescription}\n    />\n\n    <!-- og-image -->\n    <meta\n      property=\"og:image\"\n      content={`${config.site.base_url}${\n        image ? image : config.metadata.meta_image\n      }`}\n    />\n\n    <!-- twitter-image -->\n    <meta\n      name=\"twitter:image\"\n      content={`${config.site.base_url}${\n        image ? image : config.metadata.meta_image\n      }`}\n    />\n    <meta name=\"twitter:card\" content=\"summary_large_image\" />\n    <meta name=\"twitter:site\" content=\"@sovereigneng\" />\n    <meta name=\"twitter:creator\" content=\"@dergigi\" />\n\n    <!-- Additional Social Media Meta Tags -->\n    <meta property=\"og:site_name\" content=\"Sovereign Engineering\" />\n    <meta property=\"og:locale\" content=\"en_US\" />\n    <meta property=\"og:image:width\" content=\"1200\" />\n    <meta property=\"og:image:height\" content=\"630\" />\n    <meta property=\"og:image:alt\" content=\"Sovereign Engineering - The Program That Brought You Blossom, Nutzaps, Wikifreedia, Nsite, TollGate, Zapstore, and More\" />\n\n    <!-- Structured Data -->\n    <script type=\"application/ld+json\">\n      {\n        \"@context\": \"https://schema.org\",\n        \"@type\": \"Organization\",\n        \"name\": \"Sovereign Engineering\",\n        \"url\": \"${config.site.base_url}\",\n        \"logo\": \"${config.site.base_url}${config.site.logo}\",\n        \"description\": \"${processedDescription}\",\n        \"sameAs\": [\n          \"https://njump.me/npub1p4kg8zxukpym3h20erfa3samj00rm2gt4q5wfuyu3tg0x3jg3gesvncxf8\",\n          \"https://njump.me/npub1330v3vee2mdvn2npdkquka2upmlrlsp0dl2c6kfnzwhpq6dvkjgq0d2k82\",\n          \"https://dergigi.com\"\n        ]\n      }\n    </script>\n  </head>\n  <body>\n    {/* google tag manager noscript */}\n    {\n      config.google_tag_manager.enable && (\n        <GoogleTagmanagerNoscript id={config.google_tag_manager.gtm_id} />\n      )\n    }\n\n    <TwSizeIndicator />\n    <StickyNav />\n    <main id=\"main-content\">\n      <slot />\n    </main>\n    {showCallToAction && call_to_action && (\n      <CallToAction call_to_action={call_to_action} />\n    )}\n    <Footer />\n  </body>\n</html>\n","usedDeprecatedRules":[{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]}]},{"filePath":"/Users/gigi/Development/soveng/soveng2/src/layouts/components/BigBlockQuote.astro","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]}]},{"filePath":"/Users/gigi/Development/soveng/soveng2/src/layouts/components/Breadcrumbs.astro","messages":[{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":17,"column":3,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":22,"endColumn":8},{"ruleId":"jsx-a11y/no-redundant-roles","severity":2,"message":"The element ol has an implicit role of list. Defining this explicitly is redundant and should be avoided.","line":27,"column":3,"nodeType":"JSXOpeningElement","endLine":27,"endColumn":39},{"ruleId":"jsx-a11y/no-redundant-roles","severity":2,"message":"The element li has an implicit role of listitem. Defining this explicitly is redundant and should be avoided.","line":30,"column":9,"nodeType":"JSXOpeningElement","endLine":30,"endColumn":53}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"---\nimport { humanize } from \"@/lib/utils/textConverter\";\n\nconst { className }: { className?: string } = Astro.props;\n\nconst paths = Astro.url.pathname.split(\"/\").filter((x) => x);\nconst parts = [\n  {\n    label: \"Home\",\n    href: \"/\",\n    \"aria-label\": Astro.url.pathname === \"/\" ? \"page\" : undefined,\n  },\n];\n\npaths.forEach((label: string, i: number) => {\n  const href = `/${paths.slice(0, i + 1).join(\"/\")}`;\n  label !== \"page\" &&\n    parts.push({\n      label: humanize(label.replace(\".html\", \"\").replace(/[-_]/g, \" \")) || \"\",\n      href,\n      \"aria-label\": Astro.url.pathname === href ? \"page\" : undefined,\n    });\n});\n---\n\n<nav aria-label=\"Breadcrumb\" class={className}>\n  <ol class=\"inline-flex\" role=\"list\">\n    {\n      parts.map(({ label, ...attrs }, index) => (\n        <li class=\"mx-1 capitalize\" role=\"listitem\">\n          {index > 0 && <span class=\"inlin-block mr-1\">/</span>}\n          {index !== parts.length - 1 ? (\n            <a class=\"text-primary dark:text-darkmode-primary\" {...attrs}>\n              {label}\n            </a>\n          ) : (\n            <span class=\"text-text-light dark:text-darkmode-text-light\">\n              {label}\n            </span>\n          )}\n        </li>\n      ))\n    }\n  </ol>\n</nav>\n","usedDeprecatedRules":[{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]}]},{"filePath":"/Users/gigi/Development/soveng/soveng2/src/layouts/components/ContentLead.astro","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]}]},{"filePath":"/Users/gigi/Development/soveng/soveng2/src/layouts/components/ContentSection.astro","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ')' expected.","line":46,"column":6,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"---\nimport { Image } from \"astro:assets\";\nimport { markdownify } from \"@/lib/utils/textConverter\";\nimport BigBlockQuote from \"@/layouts/components/BigBlockQuote.astro\";\nimport type { Button } from \"@/types\";\nimport type { ImageMetadata } from \"astro\";\n\ninterface Props {\n  title: string;\n  content: string;\n  image: string | ImageMetadata;\n  bulletpoints?: string[];\n  button?: Button;\n  index: number;\n  id?: string;\n  pullquote?: {\n    quote: string;\n    author: string;\n    href?: string;\n  };\n  fullWidthImage?: boolean;\n}\n\nconst { title, content, image, bulletpoints = [], button, index, id, pullquote, fullWidthImage = false } = Astro.props;\n\n// Check if image is an imported asset or a string path\nconst isOptimizedImage = typeof image === 'object' && image !== null;\n\n// Pre-process markdown content\nconst featureTitle = await markdownify(title);\nconst featureContent = await markdownify(content, true); // Add div: true for paragraph processing\n\n// Process bullet points\nconst processedBulletPoints = await Promise.all(\n  bulletpoints.map(async (bullet: string) => await markdownify(bullet))\n);\n---\n\n<section \n  class=\"section-sm bg-black text-white\"\n  id={id}\n>\n  <div class=\"container\">\n    {fullWidthImage || !image ? (\n      <!-- Full width image layout -->\n      {image && (\n        <div class=\"row justify-center\">\n          <div class=\"col-12\">\n            {isOptimizedImage ? (\n              <Image\n                src={image as ImageMetadata}\n                height={960}\n                width={2400}\n                alt={title}\n                class=\"feature-image w-full mb-8\"\n                format=\"webp\"\n                quality={85}\n                loading=\"lazy\"\n              />\n            ) : (\n              <img\n                src={image as string}\n                height={480}\n                width={1200}\n                alt={title}\n                class=\"feature-image w-full mb-8\"\n              />\n            )}\n          </div>\n        </div>\n      )}\n      <div class=\"row justify-center\">\n        <div class=\"md:col-10 lg:col-8\">\n          <h2 set:html={featureTitle} class=\"mb-4 text-white uppercase text-center\" style=\"font-size: 2rem;\" />\n          \n          {pullquote && pullquote.quote && pullquote.author && (\n            <BigBlockQuote\n              quote={pullquote.quote}\n              author={pullquote.author}\n              href={pullquote.href}\n              left={true}\n            />\n          )}\n          \n          <div set:html={featureContent} class=\"prose-content mb-8 [&>p]:text-xl [&>p]:text-white\" />\n          {processedBulletPoints.length > 0 && (\n            <ul>\n              {processedBulletPoints.map((bullet: string) => (\n                <li class=\"flex items-center mb-4 text-white text-lg\">\n                  <span class=\"mr-3 flex-shrink-0 text-white\">&#10022;</span>\n                  <span set:html={bullet} class=\"text-lg [&_a]:text-lg [&_a]:text-white\" />\n                </li>\n              ))}\n            </ul>\n          )}\n          {button?.enable && (\n            <a \n              class=\"btn-retro mt-5 inline-block\" \n              href={button.link}\n              target={button.link.startsWith(\"http\") ? \"_blank\" : \"_self\"}\n              rel={button.link.startsWith(\"http\") ? \"noopener noreferrer\" : \"\"}\n            >\n              {button.label}\n            </a>\n          )}\n        </div>\n      </div>\n    ) : (\n      <!-- Side by side layout -->\n      <div class=\"row items-start justify-between\">\n        <div class=\"md:col-7 lg:col-6\">\n          <h2 set:html={featureTitle} class=\"mb-4 text-white uppercase\" style=\"font-size: 2rem;\" />\n          \n          {pullquote && pullquote.quote && pullquote.author && (\n            <BigBlockQuote\n              quote={pullquote.quote}\n              author={pullquote.author}\n              href={pullquote.href}\n              left={true}\n            />\n          )}\n          \n          <div set:html={featureContent} class=\"prose-content mb-8 [&>p]:text-xl [&>p]:text-white\" />\n          {processedBulletPoints.length > 0 && (\n            <ul>\n              {processedBulletPoints.map((bullet: string) => (\n                <li class=\"flex items-center mb-4 text-white text-lg\">\n                  <span class=\"mr-3 flex-shrink-0 text-white\">&#10022;</span>\n                  <span set:html={bullet} class=\"text-lg [&_a]:text-lg [&_a]:text-white\" />\n                </li>\n              ))}\n            </ul>\n          )}\n          {button?.enable && (\n            <a \n              class=\"btn-retro mt-5 inline-block\" \n              href={button.link}\n              target={button.link.startsWith(\"http\") ? \"_blank\" : \"_self\"}\n              rel={button.link.startsWith(\"http\") ? \"noopener noreferrer\" : \"\"}\n            >\n              {button.label}\n            </a>\n          )}\n        </div>\n        <div class=\"mb:md-0 mb-6 md:col-5\">\n          {isOptimizedImage ? (\n            <Image\n              src={image as ImageMetadata}\n              height={960}\n              width={1040}\n              alt={title}\n              class=\"feature-image\"\n              format=\"webp\"\n              quality={85}\n              loading=\"lazy\"\n            />\n          ) : (\n            <img\n              src={image as string}\n              height={480}\n              width={520}\n              alt={title}\n              class=\"feature-image\"\n            />\n          )}\n        </div>\n      </div>\n    )}\n  </div>\n</section>\n\n<style>\n  .feature-image {\n    image-rendering: auto !important;\n    image-rendering: smooth !important;\n    image-rendering: high-quality !important;\n    image-rendering: -webkit-optimize-contrast !important;\n    max-width: 100%;\n    height: auto;\n  }\n</style> ","usedDeprecatedRules":[{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]}]},{"filePath":"/Users/gigi/Development/soveng/soveng2/src/layouts/components/FaqSection.astro","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'index' is assigned a value but never used.","line":18,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":32},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":46,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1100,1103],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1100,1103],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"---\nimport { markdownify } from \"@/lib/utils/textConverter\";\n\ninterface Question {\n  question: string;\n  answer: string;\n}\n\ninterface Props {\n  title: string;\n  questions: Question[];\n  index: number;\n  id?: string;\n  image?: string;\n  content?: string;\n}\n\nconst { title, questions, index, id, image, content } = Astro.props;\n\n// Pre-process markdown content\nconst sectionTitle = await markdownify(title);\n\n// Process questions and answers\nconst processedQuestions = await Promise.all(\n  questions.map(async (qa: Question) => ({\n    question: await markdownify(qa.question),\n    answer: await markdownify(qa.answer, true)\n  }))\n);\n---\n\n<section\n  class=\"section-sm bg-black text-white mb-2\"\n  id={id}\n>\n  <div class=\"container\">\n    <div class=\"row justify-center\">\n      <div class=\"md:col-10 lg:col-8\">\n        <h2 set:html={sectionTitle} class=\"mb-14 text-white uppercase text-center\" style=\"font-size: 2rem;\" />\n\n        {content && (\n          <div class=\"space-y-8 mb-8 content\" set:html={content} />\n        )}\n\n        <div class=\"space-y-8 mb-1 mt-6\">\n          {processedQuestions.map((qa: any) => (\n            <div class=\"faq-item\">\n              <h3\n                class=\"text-xl font-bold text-white mb-4 uppercase scroll-mt-32\"\n                id={qa.question\n                  .replace(/<[^>]+>/g, \"\") // Remove HTML tags\n                  .toLowerCase()\n                  .replace(/[^a-z0-9]+/g, \"-\")\n                  .replace(/(^-|-$)/g, \"\")\n                }\n                set:html={qa.question}\n              />\n              <div set:html={qa.answer} class=\"content\" />\n            </div>\n          ))}\n        </div>\n\n        {image && (\n          <div class=\"mt-8\">\n            <img\n              src={image}\n              alt={title}\n              class=\"feature-image w-full rounded-lg\"\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  </div>\n</section>\n\n<style>\n  .feature-image {\n    image-rendering: auto !important;\n    image-rendering: smooth !important;\n    image-rendering: high-quality !important;\n    image-rendering: -webkit-optimize-contrast !important;\n    max-width: 100%;\n    height: auto;\n  }\n\n  .faq-item {\n    border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n    padding-bottom: 2rem;\n  }\n\n  .faq-item:last-child {\n    border-bottom: none;\n    padding-bottom: 0;\n  }\n\n\n</style>\n","usedDeprecatedRules":[{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]}]},{"filePath":"/Users/gigi/Development/soveng/soveng2/src/layouts/components/FeatureSection.astro","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[696,699],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[696,699],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"---\nimport { Image } from \"astro:assets\";\nimport { markdownify } from \"@/lib/utils/textConverter\";\nimport type { Button } from \"@/types\";\n\n// Import optimized images\nimport boat1Image from \"@/assets/images/boat1.png\";\nimport boat2Image from \"@/assets/images/boat2.png\";\nimport mapImage from \"@/assets/images/map.png\";\nimport menWantedImage from \"@/assets/images/men-wanted.png\";\n\ninterface Props {\n  title: string;\n  content: string;\n  image: string;\n  bulletpoints?: string[];\n  button?: Button;\n  index: number;\n  id?: string;\n}\n\nconst { title, content, image, bulletpoints = [], button, index, id } = Astro.props;\n\n// Map public image paths to optimized imports\nconst imageMap: Record<string, any> = {\n  \"/images/boat1.png\": boat1Image,\n  \"/images/boat2.png\": boat2Image,\n  \"/images/map.png\": mapImage,\n  \"/images/men-wanted.png\": menWantedImage,\n};\n\n// Get optimized image or fallback to original path\nconst optimizedImage = imageMap[image] || image;\nconst useOptimizedImage = imageMap[image] !== undefined;\n\n// Define which images should have pixelated rendering\nconst pixelatedImages = [\n  \"/images/boat1.png\",\n  \"/images/boat2.png\",\n  \"/images/map.png\",\n  \"/images/men-wanted.png\"\n];\nconst shouldBePixelated = pixelatedImages.includes(image);\n\n// Create descriptive alt text instead of just using title\nconst imageAltMap: Record<string, string> = {\n  \"/images/boat1.png\": \"Sailing ship on blue waters representing collaboration and exploration\",\n  \"/images/boat2.png\": \"Pixelated sailing vessel symbolizing building towards a self-sovereign future\",\n  \"/images/map.png\": \"Strategic map view of Madeira showing weekly program structure\",\n  \"/images/men-wanted.png\": \"Vintage recruitment poster encouraging applications\",\n};\n\nconst altText = imageAltMap[image] || `Illustration for ${title}`;\n\n// Pre-process markdown content\nconst featureTitle = await markdownify(title);\nconst featureContent = await markdownify(content);\n\n// Process bullet points\nconst processedBulletPoints = await Promise.all(\n  bulletpoints.map(async (bullet: string) => await markdownify(bullet))\n);\n\n// Determine if image should be on the right (odd index)\nconst imageRight = index % 2 !== 0;\n---\n\n<section\n  class=\"section-sm bg-black text-white\"\n  id={id}\n>\n  <div class=\"container\">\n    <div class=\"row items-center justify-between\">\n      <div\n        class={`mb:md-0 mb-6 md:col-5 ${imageRight && \"md:order-2\"}`}\n      >\n        {useOptimizedImage ? (\n          <Image\n            src={optimizedImage}\n            height={960}\n            width={1040}\n            alt={altText}\n            class={`feature-image ${shouldBePixelated ? 'pixelated' : ''}`}\n            format=\"webp\"\n            loading=\"lazy\"\n            quality={85}\n          />\n        ) : (\n          <img\n            src={image}\n            height={960}\n            width={1040}\n            alt={altText}\n            class={`feature-image ${shouldBePixelated ? 'pixelated' : ''}`}\n          />\n        )}\n      </div>\n      <div class={`md:col-7 lg:col-6 ${imageRight && \"md:order-1\"}`}>\n        <h2 set:html={featureTitle} class=\"mb-4 text-white uppercase\" style=\"font-size: 2rem;\" />\n        <p set:html={featureContent} class=\"mb-8 text-xl text-white\" />\n        {processedBulletPoints.length > 0 && (\n          <ul>\n            {processedBulletPoints.map((bullet: string) => (\n              <li class=\"flex items-center mb-4 text-white text-lg\">\n                <span class=\"mr-3 flex-shrink-0 text-white\">&#10022;</span>\n                <span set:html={bullet} class=\"text-lg\" />\n              </li>\n            ))}\n          </ul>\n        )}\n        {button?.enable && (\n          <a\n            class=\"btn-retro mt-5 inline-block\"\n            href={button.link}\n            target={button.link.startsWith(\"http\") ? \"_blank\" : \"_self\"}\n            rel={button.link.startsWith(\"http\") ? \"noopener noreferrer\" : \"\"}\n          >\n            {button.label}\n          </a>\n        )}\n      </div>\n    </div>\n  </div>\n</section>\n\n<style>\n  .feature-image {\n    max-width: 100%;\n    height: auto;\n  }\n\n  .feature-image:not(.pixelated) {\n    image-rendering: auto !important;\n    image-rendering: smooth !important;\n    image-rendering: high-quality !important;\n    image-rendering: -webkit-optimize-contrast !important;\n  }\n\n  .feature-image.pixelated {\n    image-rendering: pixelated !important;\n    image-rendering: -moz-crisp-edges !important;\n    image-rendering: crisp-edges !important;\n  }\n</style>\n","usedDeprecatedRules":[{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]}]},{"filePath":"/Users/gigi/Development/soveng/soveng2/src/layouts/components/ImageMod.astro","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[405,408],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[405,408],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prefer-const","severity":2,"message":"'alt' is never reassigned. Use 'const' instead.","line":21,"column":3,"nodeType":"Identifier","messageId":"useConst","endLine":21,"endColumn":6},{"ruleId":"prefer-const","severity":2,"message":"'width' is never reassigned. Use 'const' instead.","line":22,"column":3,"nodeType":"Identifier","messageId":"useConst","endLine":22,"endColumn":8},{"ruleId":"prefer-const","severity":2,"message":"'height' is never reassigned. Use 'const' instead.","line":23,"column":3,"nodeType":"Identifier","messageId":"useConst","endLine":23,"endColumn":9},{"ruleId":"prefer-const","severity":2,"message":"'loading' is never reassigned. Use 'const' instead.","line":24,"column":3,"nodeType":"Identifier","messageId":"useConst","endLine":24,"endColumn":10},{"ruleId":"prefer-const","severity":2,"message":"'decoding' is never reassigned. Use 'const' instead.","line":25,"column":3,"nodeType":"Identifier","messageId":"useConst","endLine":25,"endColumn":11},{"ruleId":"prefer-const","severity":2,"message":"'className' is never reassigned. Use 'const' instead.","line":26,"column":10,"nodeType":"Identifier","messageId":"useConst","endLine":26,"endColumn":19},{"ruleId":"prefer-const","severity":2,"message":"'format' is never reassigned. Use 'const' instead.","line":27,"column":3,"nodeType":"Identifier","messageId":"useConst","endLine":27,"endColumn":9},{"ruleId":"prefer-const","severity":2,"message":"'style' is never reassigned. Use 'const' instead.","line":28,"column":3,"nodeType":"Identifier","messageId":"useConst","endLine":28,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":40,"column":1,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":43,"endColumn":5},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":41,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":41,"endColumn":16}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"---\nimport type { ImageMetadata } from \"astro\";\nimport { Image } from \"astro:assets\";\n\n// Props interface for the component\ninterface Props {\n  src: string;\n  alt: string;\n  width: number;\n  height: number;\n  loading?: \"eager\" | \"lazy\" | null | undefined;\n  decoding?: \"async\" | \"auto\" | \"sync\" | null | undefined;\n  format?: \"auto\" | \"avif\" | \"jpeg\" | \"png\" | \"svg\" | \"webp\";\n  class?: string;\n  style?: any;\n}\n\n// Destructuring Astro.props to get the component's props\nlet {\n  src,\n  alt,\n  width,\n  height,\n  loading,\n  decoding,\n  class: className,\n  format,\n  style,\n} = Astro.props;\n\nsrc = `/public${src}`;\n\n// Glob pattern to load images from the /public/images folder\nconst images = import.meta.glob(\"/public/images/**/*.{jpeg,jpg,png,gif}\");\n\n// Check if the source path is valid\nconst isValidPath = images[src] ? true : false;\n\n// Log a warning message in red if the image is not found\n!isValidPath &&\n  console.error(\n    `\\x1b[31mImage not found - ${src}.\\x1b[0m Make sure the image is in the /public/images folder.`,\n  );\n---\n\n{\n  isValidPath && (\n    <Image\n      src={images[src]() as Promise<{ default: ImageMetadata }>}\n      alt={alt}\n      width={width}\n      height={height}\n      loading={loading}\n      decoding={decoding}\n      class={className}\n      format={format}\n      style={style}\n    />\n  )\n}\n","usedDeprecatedRules":[{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]}]},{"filePath":"/Users/gigi/Development/soveng/soveng2/src/layouts/components/Logo.astro","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[317,320],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[317,320],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[337,340],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[337,340],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"---\nimport config from \"@/config/config.json\";\nimport ImageMod from \"./ImageMod.astro\";\n\nconst { src, srcDarkmode }: { src?: string; srcDarkmode?: string } =\n  Astro.props;\nconst {\n  logo,\n  logo_darkmode,\n  logo_width,\n  logo_height,\n  logo_text,\n  title,\n}: {\n  logo: string;\n  logo_darkmode: string;\n  logo_width: any;\n  logo_height: any;\n  logo_text: string;\n  title: string;\n} = config.site;\n\nconst { theme_switcher }: { theme_switcher: boolean } = config.settings;\n---\n\n<a href=\"/\" class=\"navbar-brand inline-block\">\n  {\n    src || srcDarkmode || logo || logo_darkmode ? (\n      <>\n        <ImageMod\n          src={src ? src : logo}\n          class={`inline-block ${theme_switcher && \"dark:hidden\"}`}\n          width={logo_width.replace(\"px\", \"\") * 2}\n          height={logo_height.replace(\"px\", \"\") * 2}\n          alt={title}\n          style={{\n            height: `${logo_height.replace(\"px\", \"\")  }px`,\n            width: `${logo_width.replace(\"px\", \"\")  }px`,\n          }}\n          format=\"webp\"\n        />\n        {theme_switcher && (\n          <ImageMod\n            src={srcDarkmode ? srcDarkmode : logo_darkmode}\n            class={\"hidden dark:inline-block\"}\n            width={logo_width.replace(\"px\", \"\") * 2}\n            height={logo_height.replace(\"px\", \"\") * 2}\n            alt={title}\n            style={{\n              height: `${logo_height.replace(\"px\", \"\")  }px`,\n              width: `${logo_width.replace(\"px\", \"\")  }px`,\n            }}\n            format=\"webp\"\n          />\n        )}\n      </>\n    ) : logo_text ? (\n      logo_text\n    ) : (\n      title\n    )\n  }\n</a>\n","usedDeprecatedRules":[{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]}]},{"filePath":"/Users/gigi/Development/soveng/soveng2/src/layouts/components/Pagination.astro","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]}]},{"filePath":"/Users/gigi/Development/soveng/soveng2/src/layouts/components/ProjectShowcase.astro","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'showCTA' is assigned a value but never used.","line":28,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ctaText' is assigned a value but never used.","line":29,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ctaLink' is assigned a value but never used.","line":30,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'title' is assigned a value but never used.","line":33,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":8},{"ruleId":"max-len","severity":1,"message":"This line has a length of 123. Maximum allowed is 100.","line":39,"column":1,"nodeType":"Program","messageId":"max","endLine":39,"endColumn":124},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'textClasses' is assigned a value but never used.","line":86,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":86,"endColumn":18},{"ruleId":"max-len","severity":1,"message":"This line has a length of 185. Maximum allowed is 100.","line":109,"column":1,"nodeType":"Program","messageId":"max","endLine":109,"endColumn":186},{"ruleId":"max-len","severity":1,"message":"This line has a length of 130. Maximum allowed is 100.","line":125,"column":1,"nodeType":"Program","messageId":"max","endLine":125,"endColumn":131},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":131,"column":55,"nodeType":null,"messageId":"unusedVar","endLine":131,"endColumn":60},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":166,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":166,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5112,5115],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5112,5115],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":167,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":167,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5212,5215],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5212,5215],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"max-len","severity":1,"message":"This line has a length of 138. Maximum allowed is 100.","line":182,"column":1,"nodeType":"Program","messageId":"max","endLine":182,"endColumn":139},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":188,"column":66,"nodeType":null,"messageId":"unusedVar","endLine":188,"endColumn":71},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":224,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":224,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7724,7727],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7724,7727],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":225,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":225,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7834,7837],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7834,7837],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":225,"column":141,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":225,"endColumn":144,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7921,7924],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7921,7924],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":231,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":231,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8189,8192],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8189,8192],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":232,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":232,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8298,8301],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8298,8301],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"max-len","severity":1,"message":"This line has a length of 132. Maximum allowed is 100.","line":256,"column":1,"nodeType":"Program","messageId":"max","endLine":256,"endColumn":133},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":263,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":263,"endColumn":38}],"suppressedMessages":[],"errorCount":15,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"---\nimport philosophyQuotes from \"@/data/philosophy-quotes.json\";\nimport BigBlockQuote from \"@/layouts/components/BigBlockQuote.astro\";\n\ninterface Project {\n  name: string;\n  description: string;\n  cohort: string;\n  link: string;\n  linkText: string;\n  logo?: string;\n}\n\ninterface Props {\n  projects: Project[];\n  showCTA?: boolean;\n  ctaText?: string;\n  ctaLink?: string;\n  darkTheme?: boolean;\n  showTitle?: boolean;\n  title?: string;\n  groupByCohort?: boolean;\n  showHighlights?: boolean;\n}\n\nconst {\n  projects,\n  showCTA = false,\n  ctaText = \"See All Projects\",\n  ctaLink = \"/projects\",\n  darkTheme = false,\n  showTitle = false,\n  title = \"Demo Day Projects\",\n  groupByCohort = true,\n  showHighlights = false\n} = Astro.props;\n\n// Group projects by cohort\nconst projectsByCohort: Record<string, Project[]> = projects.reduce((acc: Record<string, Project[]>, project: Project) => {\n  if (!acc[project.cohort]) {\n    acc[project.cohort] = [];\n  }\n  acc[project.cohort].push(project);\n  return acc;\n}, {});\n\n// Sort cohorts in ascending order (SEC-01, SEC-02, SEC-03, SEC-04)\nconst sortedCohorts = Object.keys(projectsByCohort).sort((a, b) => {\n  const numA = parseInt(a.replace('SEC-', ''));\n  const numB = parseInt(b.replace('SEC-', ''));\n  return numA - numB;\n});\n\n// Get highlighted projects (the ones mentioned in the homepage title)\nconst highlightedProjectNames = [\n  \"Blossom\",\n  \"NIP-60\",\n  \"NIP-61\",\n  \"NIP-54\",\n  \"npub.cash\",\n  \"Nsite\",\n  \"Tollgate\",\n  \"Hypernote\",\n  \"DVMCP\"\n];\nconst highlightedProjects = highlightedProjectNames\n  .map(name => projects.find(project => project.name === name))\n  .filter(Boolean) as Project[];\n\nconst containerClasses = darkTheme\n  ? \"w-full text-white bg-black py-8 sm:py-16 max-w-[960px] mx-auto\"\n  : \"section bg-theme-light\";\n\nconst headerClasses = darkTheme\n  ? \"text-2xl mb-8\"\n  : \"text-3xl mb-8\";\n\nconst titleClasses = darkTheme\n  ? \"text-4xl mb-8 pt-16 text-center text-white font-normal\"\n  : \"text-4xl mb-8 text-center\";\n\nconst borderClasses = darkTheme\n  ? \"border-white\"\n  : \"border-border\";\n\nconst textClasses = darkTheme\n  ? \"text-white\"\n  : \"text-text\";\n\nconst descriptionClasses = darkTheme\n  ? \"text-gray-300\"\n  : \"text-text\";\n\nconst linkClasses = darkTheme\n  ? \"text-white hover:text-primary transition-colors break-all\"\n  : \"text-primary hover:text-primary/80 transition-colors break-all font-medium\";\n\nconst cohortHeaderClasses = darkTheme\n  ? \"text-3xl mb-6 mt-12 first:mt-0 font-normal\"\n  : \"text-3xl mb-6 mt-12 first:mt-0\";\n---\n\n<section class={containerClasses}>\n  <div class=\"container\">\n    {showTitle && (\n      <>\n        <h1 class={titleClasses}>Demo Day Projects</h1>\n        <p class={`text-center text-xl mb-12 ${darkTheme ? 'text-white' : 'text-text'}`}>\n          Every Friday, participants showcase what they've built during the week. These are the real projects that emerged from our intensive collaboration and experimentation sessions.\n        </p>\n      </>\n    )}\n    {!showTitle && (\n      <h2 class={headerClasses} style=\"font-size: 2rem;\">Demo Day Projects</h2>\n    )}\n\n    {/* Highlights Section */}\n    {showHighlights && highlightedProjects.length > 0 && (\n      <div class=\"mb-24\">\n        <h2 class={cohortHeaderClasses} style=\"font-family: 'IM Fell Double Pica', Times, serif;\">\n          HIGHLIGHTS\n        </h2>\n        <div class=\"overflow-x-auto mb-8\">\n          <!-- Table Header - Hidden on mobile, shown on larger screens -->\n          <div class={`hidden md:grid grid-cols-[3fr_1fr] gap-8 py-4 border-b ${borderClasses} text-sm font-bold tracking-wider`}>\n            <div>Project Info</div>\n            <div>Link</div>\n          </div>\n\n          <!-- Highlighted Project Entries -->\n          {highlightedProjects.map((project: Project, index: number) => (\n            <div class={`flex flex-col md:grid md:grid-cols-[3fr_1fr] gap-4 md:gap-8 py-${darkTheme ? '4' : '6'} border-b ${borderClasses}`}>\n              <div class=\"flex items-start gap-4\">\n                {project.logo && (\n                  <div class=\"flex-shrink-0\">\n                    <img\n                      src={project.logo}\n                      alt={`${project.name} logo`}\n                      class=\"w-12 h-12 object-contain showcase-logo\"\n                    />\n                  </div>\n                )}\n                <div>\n                  <h4 class={`${darkTheme ? 'text-xl' : 'text-xl font-semibold'} ${darkTheme ? '' : 'mb-2'}`}>{project.name}</h4>\n                  <p class={`${darkTheme ? 'my-0' : ''} ${descriptionClasses}`}>{project.description}</p>\n                </div>\n              </div>\n              <div class=\"text-sm md:text-base\">\n                <a\n                  href={project.link}\n                  class={linkClasses}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  {project.linkText}\n                </a>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    )}\n    {/* Richard L. Evans Quote after highlights */}\n    {showHighlights && (\n      <BigBlockQuote\n        quote={philosophyQuotes.find((q: any) => q.id === \"richard-evans-beginning\")?.quote || \"\"}\n        author={philosophyQuotes.find((q: any) => q.id === \"richard-evans-beginning\")?.author || \"\"}\n      />\n    )}\n\n    {groupByCohort ? (\n      <>\n        {sortedCohorts.map((cohort: string, cohortIndex: number) => (\n          <>\n            <div class={cohortIndex === 0 ? 'mt-16' : 'mt-32'}>\n            <h2 class={cohortHeaderClasses} style=\"font-family: 'IM Fell Double Pica', Times, serif;\">\n              {cohort}\n            </h2>\n            <div class=\"overflow-x-auto mb-8\">\n                {/* Table Header - Hidden on mobile, shown on larger screens */}\n                {cohortIndex === 0 && (\n                  <div class={`hidden md:grid grid-cols-[3fr_1fr] gap-8 py-4 border-b ${borderClasses} text-sm font-bold tracking-wider`}>\n                    <div>Project Info</div>\n                    <div>Link</div>\n                  </div>\n                )}\n                {/* Project Entries for this cohort */}\n                {projectsByCohort[cohort].map((project: Project, index: number) => (\n                <div\n                  class={`flex flex-col md:grid md:grid-cols-[3fr_1fr] gap-4 md:gap-8 py-${darkTheme ? '4' : '6'} border-b ${borderClasses}`}\n                >\n                  <div class=\"flex items-start gap-4\">\n                    {project.logo && (\n                      <div class=\"flex-shrink-0\">\n                        <img\n                          src={project.logo}\n                          alt={`${project.name} logo`}\n                          class=\"w-12 h-12 object-contain showcase-logo\"\n                        />\n                      </div>\n                    )}\n                    <div>\n                      <h4 class={`${darkTheme ? 'text-xl' : 'text-xl font-semibold'} ${darkTheme ? '' : 'mb-2'}`}>{project.name}</h4>\n                      <p class={`${darkTheme ? 'my-0' : ''} ${descriptionClasses}`}>{project.description}</p>\n                    </div>\n                  </div>\n                  <div class=\"text-sm md:text-base\">\n                    <a\n                      href={project.link}\n                      class={linkClasses}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      {project.linkText}\n                    </a>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n            {/* Berdyaev quote between SEC-00 and SEC-01 */}\n            {cohort === 'SEC-00' && (\n              <BigBlockQuote\n                quote={philosophyQuotes.find((q: any) => q.id === \"berdyaev-beginning-end\")?.quote || \"\"}\n                author={`${philosophyQuotes.find((q: any) => q.id === \"berdyaev-beginning-end\")?.author || \"\"}, ${philosophyQuotes.find((q: any) => q.id === \"berdyaev-beginning-end\")?.citation || \"\"}`}\n              />\n            )}\n            {/* Evans quote between SEC-01 and SEC-02 */}\n            {cohort === 'SEC-01' && (\n              <BigBlockQuote\n                quote={philosophyQuotes.find((q: any) => q.id === \"richard-evans-wrong-road\")?.quote || \"\"}\n                author={philosophyQuotes.find((q: any) => q.id === \"richard-evans-wrong-road\")?.author || \"\"}\n              />\n            )}\n          </>\n        ))}\n\n        {/* SEC-05 CTA Section */}\n        <div class=\"mt-16 text-center\">\n          <h2 class={cohortHeaderClasses} style=\"font-family: 'IM Fell Double Pica', Times, serif;\">\n            SEC-05\n          </h2>\n          <div class=\"py-12\">\n            <p class={`text-xl mb-8 ${darkTheme ? 'text-gray-300' : 'text-text'}`}>\n              Your Project Here\n            </p>\n            <p class={`text-lg mb-8 ${darkTheme ? 'text-gray-300' : 'text-text'}`}>\n              Join the next cohort and build the future you want to see.\n            </p>\n          </div>\n        </div>\n      </>\n    ) : (\n      <div class=\"overflow-x-auto mb-8\">\n        <!-- Table Header - Hidden on mobile, shown on larger screens -->\n        <div class={`hidden md:grid grid-cols-[2fr_1fr_1fr] gap-8 py-4 border-b ${borderClasses} text-sm font-bold tracking-wider`}>\n          <div>Project Info</div>\n          <div>Cohort #</div>\n          <div>Link</div>\n        </div>\n\n        <!-- Project Entries -->\n        {projects.map((project, index) => (\n          <div\n            class={`flex flex-col md:grid md:grid-cols-[2fr_1fr_1fr] gap-4 md:gap-8 py-${darkTheme ? '4' : '6'} border-b ${borderClasses}`}\n          >\n            <div class=\"flex items-start gap-4\">\n              {project.logo && (\n                <div class=\"flex-shrink-0\">\n                  <img\n                    src={project.logo}\n                    alt={`${project.name} logo`}\n                    class=\"w-12 h-12 object-contain showcase-logo\"\n                  />\n                </div>\n              )}\n              <div>\n                <h4 class={`${darkTheme ? 'text-xl' : 'text-xl font-semibold'} ${darkTheme ? '' : 'mb-2'}`}>{project.name}</h4>\n                <p class={`${darkTheme ? 'my-0' : ''} ${descriptionClasses}`}>{project.description}</p>\n              </div>\n            </div>\n            <div class=\"text-sm md:text-base\">\n              <span class=\"md:hidden font-bold\">Cohort: </span>\n              {darkTheme ? (\n                project.cohort\n              ) : (\n                <span class=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-primary text-white\">\n                  {project.cohort}\n                </span>\n              )}\n            </div>\n            <div class=\"text-sm md:text-base\">\n              <a\n                href={project.link}\n                class={linkClasses}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                {project.linkText}\n              </a>\n            </div>\n          </div>\n        ))}\n      </div>\n    )}\n  </div>\n</section>\n\n<style>\n  .showcase-logo {\n    filter: contrast(1000%) grayscale(100%);\n    image-rendering: pixelated;\n    image-rendering: crisp-edges;\n    transition: filter 0.3s ease;\n  }\n\n  .showcase-logo:hover {\n    filter: none;\n  }\n</style>\n","usedDeprecatedRules":[{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]}]},{"filePath":"/Users/gigi/Development/soveng/soveng2/src/layouts/components/Share.astro","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]}]},{"filePath":"/Users/gigi/Development/soveng/soveng2/src/layouts/components/Social.astro","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]}]},{"filePath":"/Users/gigi/Development/soveng/soveng2/src/layouts/components/StickyNav.astro","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]}]},{"filePath":"/Users/gigi/Development/soveng/soveng2/src/layouts/components/ThemeSwitcher.astro","messages":[{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":15,"column":7,"nodeType":"JSXOpeningElement","endLine":15,"endColumn":35},{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":55,"column":35,"nodeType":null}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"---\nimport config from \"@/config/config.json\";\n\nconst {\n  theme_switcher,\n  // default_theme,\n}: { theme_switcher: boolean; default_theme: string } = config.settings;\nconst { className }: { className?: string } = Astro.props;\n---\n\n{\n  theme_switcher && (\n    <div class={`theme-switcher ${className}`}>\n      <input id=\"theme-switcher\" data-theme-switcher type=\"checkbox\" />\n      <label for=\"theme-switcher\">\n        <span class=\"sr-only\">theme switcher</span>\n        <span>\n          <svg\n            class=\"absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 z-10 opacity-100 dark:opacity-0\"\n            viewBox=\"0 0 56 56\"\n            fill=\"#fff\"\n            height=\"16\"\n            width=\"16\"\n          >\n            <path d=\"M30 4.6c0-1-.9-2-2-2a2 2 0 0 0-2 2v5c0 1 .9 2 2 2s2-1 2-2Zm9.6 9a2 2 0 0 0 0 2.8c.8.8 2 .8 2.9 0L46 13a2 2 0 0 0 0-2.9 2 2 0 0 0-3 0Zm-26 2.8c.7.8 2 .8 2.8 0 .8-.7.8-2 0-2.9L13 10c-.7-.7-2-.8-2.9 0-.7.8-.7 2.1 0 3ZM28 16a12 12 0 0 0-12 12 12 12 0 0 0 12 12 12 12 0 0 0 12-12 12 12 0 0 0-12-12Zm23.3 14c1.1 0 2-.9 2-2s-.9-2-2-2h-4.9a2 2 0 0 0-2 2c0 1.1 1 2 2 2ZM4.7 26a2 2 0 0 0-2 2c0 1.1.9 2 2 2h4.9c1 0 2-.9 2-2s-1-2-2-2Zm37.8 13.6a2 2 0 0 0-3 0 2 2 0 0 0 0 2.9l3.6 3.5a2 2 0 0 0 2.9 0c.8-.8.8-2.1 0-3ZM10 43.1a2 2 0 0 0 0 2.9c.8.7 2.1.8 3 0l3.4-3.5c.8-.8.8-2.1 0-2.9-.8-.8-2-.8-2.9 0Zm20 3.4c0-1.1-.9-2-2-2a2 2 0 0 0-2 2v4.9c0 1 .9 2 2 2s2-1 2-2Z\" />\n          </svg>\n          <svg\n            class=\"absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 z-10 opacity-0 dark:opacity-100\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            height=\"16\"\n            width=\"16\"\n          >\n            <path\n              fill=\"#000\"\n              fill-rule=\"evenodd\"\n              clip-rule=\"evenodd\"\n              d=\"M8.2 2.2c1-.4 2 .6 1.6 1.5-1 3-.4 6.4 1.8 8.7a8.4 8.4 0 0 0 8.7 1.8c1-.3 2 .5 1.5 1.5v.1a10.3 10.3 0 0 1-9.4 6.2A10.3 10.3 0 0 1 3.2 6.7c1-2 2.9-3.5 4.9-4.4Z\"\n            />\n          </svg>\n        </span>\n      </label>\n    </div>\n  )\n}\n\n<script>\n  import { settings } from \"@/config/config.json\";\n  const matchMedia = window.matchMedia(\"(prefers-color-scheme: dark)\");\n\n  matchMedia.addEventListener(\"change\", () =>\n    toggleTheme(document.querySelectorAll(\"[data-theme-switcher]\"))\n  );\n\n  function toggleTheme(themeSwitch: NodeListOf<Element>) {\n    const defaulTheme =\n      settings.default_theme === \"system\"\n        ? matchMedia.matches\n          ? \"dark\"\n          : \"light\"\n        : settings.default_theme;\n    const currentTheme = localStorage.getItem(\"theme\") || defaulTheme;\n    const isDarkTheme = currentTheme === \"dark\";\n    themeSwitch.forEach((sw: any) => (sw.checked = isDarkTheme));\n    document.documentElement.classList.toggle(\"dark\", isDarkTheme);\n  }\n\n  const setDarkMode = () => {\n    const themeSwitch = document.querySelectorAll(\"[data-theme-switcher]\");\n    toggleTheme(themeSwitch);\n    themeSwitch.forEach((sw) => {\n      sw.addEventListener(\"click\", function () {\n        const defaulTheme =\n          settings.default_theme === \"system\"\n            ? matchMedia.matches\n              ? \"dark\"\n              : \"light\"\n            : settings.default_theme;\n        const currentTheme = localStorage.getItem(\"theme\") || defaulTheme;\n        const newTheme = currentTheme === \"light\" ? \"dark\" : \"light\";\n        localStorage.setItem(\"theme\", newTheme);\n        toggleTheme(themeSwitch);\n      });\n    });\n  };\n\n  // Runs on initial navigation\n  setDarkMode();\n  // Runs on view transitions navigation\n  document.addEventListener(\"astro:after-swap\", setDarkMode);\n</script>\n","usedDeprecatedRules":[{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]}]},{"filePath":"/Users/gigi/Development/soveng/soveng2/src/layouts/components/TwSizeIndicator.astro","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]}]},{"filePath":"/Users/gigi/Development/soveng/soveng2/src/layouts/components/Win95Card.astro","messages":[{"ruleId":"max-len","severity":1,"message":"This line has a length of 125. Maximum allowed is 100.","line":10,"column":1,"nodeType":"Program","messageId":"max","endLine":10,"endColumn":126}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"---\n// Windows 95 style card component\ninterface Props {\n  class?: string;\n}\n\nconst { class: className = \"\" } = Astro.props;\n---\n\n<div class={`border-2 border-t-white border-l-white border-r-gray-600 border-b-gray-600 bg-gray-200 shadow-md ${className}`}>\n  <div class=\"p-4\">\n    <slot />\n  </div>\n</div>\n\n<style>\n  /* Additional Windows 95 card styling */\n  div {\n    box-shadow: 1px 1px 0px rgba(0, 0, 0, 0.25);\n  }\n</style>\n","usedDeprecatedRules":[{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]}]},{"filePath":"/Users/gigi/Development/soveng/soveng2/src/layouts/components/Win95Checkbox.astro","messages":[{"ruleId":"max-len","severity":1,"message":"This line has a length of 163. Maximum allowed is 100.","line":11,"column":1,"nodeType":"Program","messageId":"max","endLine":11,"endColumn":164}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"---\n// Windows 95 style checkbox component\ninterface Props {\n  checked?: boolean;\n  class?: string;\n}\n\nconst { checked = true, class: className = \"\" } = Astro.props;\n---\n\n<div class={`inline-flex items-center justify-center w-4 h-4 border-2 border-t-gray-600 border-l-gray-600 border-r-white border-b-white bg-gray-300 ${className}`}>\n  {checked && (\n    <svg\n      width=\"10\"\n      height=\"10\"\n      viewBox=\"0 0 10 10\"\n      fill=\"none\"\n      class=\"pixelated-svg\"\n    >\n      <path\n        d=\"M1 4L4 7L9 1\"\n        stroke=\"black\"\n        stroke-width=\"1.5\"\n        stroke-linecap=\"square\"\n        stroke-linejoin=\"miter\"\n        style=\"image-rendering: pixelated;\"\n      />\n    </svg>\n  )}\n</div>\n\n<style>\n  .pixelated-svg {\n    image-rendering: pixelated;\n    image-rendering: -webkit-optimize-contrast;\n  }\n</style>\n","usedDeprecatedRules":[{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]}]},{"filePath":"/Users/gigi/Development/soveng/soveng2/src/layouts/helpers/Disqus.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]}]},{"filePath":"/Users/gigi/Development/soveng/soveng2/src/layouts/helpers/DynamicIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]}]},{"filePath":"/Users/gigi/Development/soveng/soveng2/src/layouts/partials/CallToAction.astro","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]}]},{"filePath":"/Users/gigi/Development/soveng/soveng2/src/layouts/partials/Footer.astro","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Logo' is defined but never used.","line":2,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":12}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"---\nimport Logo from \"@/components/Logo.astro\";\nimport Social from \"@/components/Social.astro\";\nimport config from \"@/config/config.json\";\nimport menu from \"@/config/menu.json\";\nimport social from \"@/config/social.json\";\nimport { markdownify } from \"@/lib/utils/textConverter\";\n\nconst { footer }: { footer: { name: string; url: string }[] } = menu;\n---\n\n<footer class=\"bg-black text-white border-t border-primary\">\n  <div class=\"container\">\n    <div class=\"row items-center py-10\">\n      <div class=\"mb-8 text-center lg:col-3 lg:mb-0 lg:text-left\">\n        <div class=\"flex items-center justify-center lg:justify-start\">\n          <img src=\"/images/sec-05-sec-05-brandmark-white-rgb.svg\" alt=\"Sovereign Engineering\" class=\"w-8 h-8 mr-3\" />\n          <a href=\"https://nostr.band/?q=%23SovEng\" target=\"_blank\" rel=\"noopener\" class=\"text-white font-bold hover:text-primary transition-colors\">#SovEng</a>\n        </div>\n      </div>\n      <div class=\"mb-8 lg:col-6 lg:mb-0\">\n        <ul class=\"flex flex-wrap justify-center items-center gap-x-6 gap-y-2 whitespace-nowrap overflow-x-auto\">\n          {\n            footer.filter(menu => menu.name !== \"Contact\" && menu.name !== \"About\")\n              .sort((a, b) => a.name.localeCompare(b.name))\n              .map((menu) => {\n                const isExternal = menu.url.startsWith('http') || menu.url.startsWith('mailto');\n                return (\n                  <li class=\"inline-block\">\n                    <a\n                      href={menu.url}\n                      class=\"text-white hover:text-primary transition-colors flex items-center\"\n                      {...(isExternal && { target: \"_blank\", rel: \"noopener noreferrer\" })}\n                    >\n                      <span>{menu.name}</span>\n                      {isExternal && (\n                        <svg class=\"w-3 h-3 ml-1 opacity-60\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                          <path d=\"M13 5H19V11\"/>\n                          <path d=\"M19 5L5 19\"/>\n                        </svg>\n                      )}\n                    </a>\n                  </li>\n                );\n              })\n          }\n        </ul>\n      </div>\n      <div class=\"mb-8 lg:col-3 lg:mb-0 lg:mt-0 flex justify-end items-center gap-3\">\n        <Social source={social.main} className=\"social-icons text-white\" />\n      </div>\n    </div>\n  </div>\n  <div class=\"border-t border-primary py-7\">\n    <div class=\"container text-center text-white content\">\n      <p set:html={markdownify(config.params.copyright)} />\n    </div>\n  </div>\n</footer>\n","usedDeprecatedRules":[{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]}]},{"filePath":"/Users/gigi/Development/soveng/soveng2/src/layouts/partials/PageHeader.astro","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]}]},{"filePath":"/Users/gigi/Development/soveng/soveng2/src/layouts/partials/PostSidebar.astro","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[361,364],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[361,364],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[437,440],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[437,440],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":39,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1058,1061],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1058,1061],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"---\nimport { humanize } from \"@/lib/utils/textConverter\";\n\nconst { tags, categories, allCategories } = Astro.props;\n---\n\n<div class=\"lg:col-4\">\n  <!-- categories -->\n  <div class=\"mb-8\">\n    <h5 class=\"mb-6\">Categories</h5>\n    <div class=\"rounded bg-light p-8 dark:bg-darkmode-light\">\n      <ul class=\"space-y-4\">\n        {\n          categories.map((category: any) => {\n            const count = allCategories.filter(\n              (c: any) => c === category\n            ).length;\n            return (\n              <li>\n                <a\n                  class=\"flex justify-between hover:text-primary dark:hover:text-darkmode-primary\"\n                  href={`/categories/${category}`}\n                >\n                  {humanize(category)} <span>({count})</span>\n                </a>\n              </li>\n            );\n          })\n        }\n      </ul>\n    </div>\n  </div>\n  <!-- tags -->\n  <div class=\"mb-8\">\n    <h5 class=\"mb-6\">Tags</h5>\n    <div class=\"rounded bg-light p-6 dark:bg-darkmode-light\">\n      <ul>\n        {\n          tags.map((tag: any) => {\n            return (\n              <li class=\"inline-block\">\n                <a\n                  class=\"m-1 block rounded bg-white px-3 py-1 hover:bg-primary hover:text-white dark:bg-darkmode-body dark:hover:bg-darkmode-primary dark:hover:text-text-dark\"\n                  href={`/tags/${tag}`}\n                >\n                  {humanize(tag)}\n                </a>\n              </li>\n            );\n          })\n        }\n      </ul>\n    </div>\n  </div>\n</div>\n","usedDeprecatedRules":[{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]}]},{"filePath":"/Users/gigi/Development/soveng/soveng2/src/layouts/partials/Testimonial.astro","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]}]},{"filePath":"/Users/gigi/Development/soveng/soveng2/src/layouts/shortcodes/Accordion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]}]},{"filePath":"/Users/gigi/Development/soveng/soveng2/src/layouts/shortcodes/Button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]}]},{"filePath":"/Users/gigi/Development/soveng/soveng2/src/layouts/shortcodes/Notice.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]}]},{"filePath":"/Users/gigi/Development/soveng/soveng2/src/layouts/shortcodes/Tab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]}]},{"filePath":"/Users/gigi/Development/soveng/soveng2/src/layouts/shortcodes/Tabs.tsx","messages":[{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":11,"column":7,"nodeType":"Line","messageId":"tsIgnoreInsteadOfExpectError","endLine":11,"endColumn":20,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[393,406],"text":"// @ts-expect-error"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'defaultFocus'. Either include it or remove the dependency array.","line":16,"column":6,"nodeType":"ArrayExpression","endLine":16,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [active, defaultFocus]","fix":{"range":[500,508],"text":"[active, defaultFocus]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[566,569],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[566,569],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":44,"column":13,"nodeType":"Line","messageId":"tsIgnoreInsteadOfExpectError","endLine":44,"endColumn":26,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[1558,1571],"text":"// @ts-expect-error"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { marked } from 'marked';\nimport React, { useEffect, useRef, useState } from 'react';\n\nconst Tabs = ({ children }: { children: React.ReactElement }) => {\n  const [active, setActive] = useState<number>(0);\n  const [defaultFocus, setDefaultFocus] = useState<boolean>(false);\n\n  const tabRefs: React.RefObject<HTMLElement[]> = useRef([]);\n  useEffect(() => {\n    if (defaultFocus) {\n      // @ts-ignore\n      tabRefs.current[active]?.focus();\n    } else {\n      setDefaultFocus(true);\n    }\n  }, [active]);\n\n  const tabLinks = Array.from(\n    (children.props as any).value.matchAll(/<div\\s+data-name=\"([^\"]+)\"[^>]*>((?:.|\\n)*?)<\\/div>/g),\n    (match: RegExpMatchArray) => ({ name: match[1], children: match[0] })\n  );\n\n  const handleKeyDown = (event: React.KeyboardEvent<EventTarget>, index: number) => {\n    if (event.key === 'Enter' || event.key === ' ') {\n      setActive(index);\n    } else if (event.key === 'ArrowRight') {\n      setActive((active + 1) % tabLinks.length);\n    } else if (event.key === 'ArrowLeft') {\n      setActive((active - 1 + tabLinks.length) % tabLinks.length);\n    }\n  };\n\n  return (\n    <div className=\"tab\">\n      <ul className=\"tab-nav\">\n        {tabLinks.map((item: { name: string; children: string }, index: number) => (\n          <li\n            key={index}\n            className={`tab-nav-item ${index === active && 'active'}`}\n            role=\"tab\"\n            tabIndex={index === active ? 0 : -1}\n            onKeyDown={(event) => handleKeyDown(event, index)}\n            onClick={() => setActive(index)}\n            // @ts-ignore\n            ref={(ref) => (tabRefs.current[index] = ref)}\n          >\n            {item.name}\n          </li>\n        ))}\n      </ul>\n      {tabLinks.map((item: { name: string; children: string }, i: number) => (\n        <div\n          className={active === i ? 'tab-content block px-5' : 'hidden'}\n          key={i}\n          dangerouslySetInnerHTML={{\n            __html: marked.parse(item.children),\n          }}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default Tabs;\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]}]},{"filePath":"/Users/gigi/Development/soveng/soveng2/src/layouts/shortcodes/Video.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[202,205],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[202,205],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"jsx-a11y/media-has-caption","severity":2,"message":"Media elements such as <audio> and <video> must have a <track> for captions.","line":16,"column":5,"nodeType":"JSXOpeningElement","endLine":16,"endColumn":100}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nfunction Video({\n  title,\n  width = 500,\n  height = 'auto',\n  src,\n  ...rest\n}: {\n  title: string;\n  width: number;\n  height: number | 'auto';\n  src: string;\n  [key: string]: any;\n}) {\n  return (\n    <video className=\"overflow-hidden rounded-lg\" width={width} height={height} controls {...rest}>\n      <source src={src.match(/^http/) ? src : `/videos/${src}`} type=\"video/mp4\" />\n      {title}\n    </video>\n  );\n}\n\nexport default Video;\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]}]},{"filePath":"/Users/gigi/Development/soveng/soveng2/src/layouts/shortcodes/Youtube.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":3,"column":86,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":89,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[128,131],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[128,131],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":8,"column":3,"nodeType":"Line","messageId":"tsIgnoreInsteadOfExpectError","endLine":8,"endColumn":16,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[216,229],"text":"// @ts-expect-error"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect } from 'react';\n\nconst Youtube = ({ id, title, ...rest }: { id: string; title: string; [key: string]: any }) => {\n  useEffect(() => {\n    import('@justinribeiro/lite-youtube');\n  }, []);\n\n  // @ts-ignore\n  return <lite-youtube videoid={id} videotitle={title} {...rest} />;\n};\n\nexport default Youtube;\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]}]},{"filePath":"/Users/gigi/Development/soveng/soveng2/src/lib/contentParser.astro","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]}]},{"filePath":"/Users/gigi/Development/soveng/soveng2/src/lib/taxonomyParser.astro","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[196,199],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[196,199],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[322,325],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[322,325],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":21,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[747,750],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[747,750],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":23,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[873,876],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[873,876],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"---\nimport { getSinglePage } from \"@/lib/contentParser.astro\";\nimport { slugify } from \"@/lib/utils/textConverter\";\n\n// get taxonomy from frontmatter\nexport const getTaxonomy = async (collection: any, name: string) => {\n  const singlePages = await getSinglePage(collection);\n  const taxonomyPages = singlePages.map((page: any) => page.data[name]);\n  const taxonomies: string[] = [];\n  for (let i = 0; i < taxonomyPages.length; i++) {\n    const categoryArray = taxonomyPages[i];\n    for (let j = 0; j < categoryArray.length; j++) {\n      taxonomies.push(slugify(categoryArray[j]));\n    }\n  }\n  const taxonomy = [...new Set(taxonomies)];\n  return taxonomy;\n};\n\n// get all taxonomies from frontmatter\nexport const getAllTaxonomy = async (collection: any, name: string) => {\n  const singlePages = await getSinglePage(collection);\n  const taxonomyPages = singlePages.map((page: any) => page.data[name]);\n  const taxonomies: string[] = [];\n  for (let i = 0; i < taxonomyPages.length; i++) {\n    const categoryArray = taxonomyPages[i];\n    for (let j = 0; j < categoryArray.length; j++) {\n      taxonomies.push(slugify(categoryArray[j]));\n    }\n  }\n  return taxonomies;\n};\n---\n","usedDeprecatedRules":[{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]}]},{"filePath":"/Users/gigi/Development/soveng/soveng2/src/lib/utils/dateFormat.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]}]},{"filePath":"/Users/gigi/Development/soveng/soveng2/src/lib/utils/readingTime.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]}]},{"filePath":"/Users/gigi/Development/soveng/soveng2/src/lib/utils/similarItems.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":2,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[55,58],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[55,58],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":2,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[70,73],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[70,73],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prefer-destructuring","severity":2,"message":"Use object destructuring.","line":8,"column":5,"nodeType":"AssignmentExpression","messageId":"preferDestructuring","endLine":8,"endColumn":45},{"ruleId":"prefer-destructuring","severity":2,"message":"Use object destructuring.","line":13,"column":5,"nodeType":"AssignmentExpression","messageId":"preferDestructuring","endLine":13,"endColumn":33},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[435,438],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[435,438],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":22,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[590,593],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[590,593],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// similar products\nconst similarItems = (currentItem: any, allItems: any[]) => {\n  let categories: string[] = [];\n  let tags: string[] = [];\n\n  // set categories\n  if (currentItem.data.categories.length > 0) {\n    categories = currentItem.data.categories;\n  }\n\n  // set tags\n  if (currentItem.data.tags.length > 0) {\n    tags = currentItem.data.tags;\n  }\n\n  // filter by categories\n  const filterByCategories = allItems.filter((item: any) =>\n    categories.find((category) => item.data.categories.includes(category))\n  );\n\n  // filter by tags\n  const filterByTags = allItems.filter((item: any) =>\n    tags.find((tag) => item.data.tags.includes(tag))\n  );\n\n  // merged after filter\n  const mergedItems = [...new Set([...filterByCategories, ...filterByTags])];\n\n  // filter by slug\n  const filterBySlug = mergedItems.filter((product) => product.id !== currentItem.id);\n\n  return filterBySlug;\n};\n\nexport default similarItems;\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]}]},{"filePath":"/Users/gigi/Development/soveng/soveng2/src/lib/utils/sortFunctions.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":2,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[50,53],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[50,53],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[104,107],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[104,107],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[112,115],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[112,115],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[321,324],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[321,324],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[392,395],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[392,395],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[485,488],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[485,488],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// sort by date\nexport const sortByDate = (array: any[]) => {\n  const sortedArray = array.sort(\n    (a: any, b: any) =>\n      new Date(b.data.date && b.data.date).valueOf() -\n      new Date(a.data.date && a.data.date).valueOf()\n  );\n  return sortedArray;\n};\n\n// sort product by weight\nexport const sortByWeight = (array: any[]) => {\n  const withWeight = array.filter((item: { data: { weight: any } }) => item.data.weight);\n  const withoutWeight = array.filter((item: { data: { weight: any } }) => !item.data.weight);\n  const sortedWeightedArray = withWeight.sort(\n    (a: { data: { weight: number } }, b: { data: { weight: number } }) =>\n      a.data.weight - b.data.weight\n  );\n  const sortedArray = [...new Set([...sortedWeightedArray, ...withoutWeight])];\n  return sortedArray;\n};\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]}]},{"filePath":"/Users/gigi/Development/soveng/soveng2/src/lib/utils/taxonomyFilter.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":3,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[85,88],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[85,88],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { slugify } from '@/lib/utils/textConverter';\n\nconst taxonomyFilter = (posts: any[], name: string, key: string) =>\n  posts.filter((post) => post.data[name].map((name: string) => slugify(name)).includes(key));\n\nexport default taxonomyFilter;\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]}]},{"filePath":"/Users/gigi/Development/soveng/soveng2/src/lib/utils/textConverter.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":41,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1091,1094],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1091,1094],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { slug } from 'github-slugger';\nimport { marked } from 'marked';\n\n// slugify\nexport const slugify = (content: string) => {\n  return slug(content);\n};\n\n// markdownify\nexport const markdownify = async (content: string, div?: boolean) => {\n  const html = await (div ? marked.parse(content) : marked.parseInline(content));\n  // Add target=\"_blank\" and rel=\"noopener noreferrer\" to external links\n  return html.replace(\n    /<a href=\"(https?:\\/\\/[^\"]+)\"([^>]*)>/g,\n    '<a href=\"$1\"$2 target=\"_blank\" rel=\"noopener noreferrer\">'\n  );\n};\n\n// humanize\nexport const humanize = (content: string) => {\n  return content\n    .replace(/^[\\s_]+|[\\s_]+$/g, '')\n    .replace(/[_\\s]+/g, ' ')\n    .replace(/[-\\s]+/g, ' ')\n    .replace(/^[a-z]/, (m) => {\n      return m.toUpperCase();\n    });\n};\n\n// titleify\nexport const titleify = (content: string) => {\n  const humanized = humanize(content);\n  return humanized\n    .split(' ')\n    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(' ');\n};\n\n// plainify\nexport const plainify = async (content: string) => {\n  const parseMarkdown: any = await marked.parse(content);\n  const filterBrackets = parseMarkdown.replace(/<\\/?[^>]+(>|$)/gm, '');\n  const filterSpaces = filterBrackets.replace(/[\\r\\n]\\s*[\\r\\n]/gm, '');\n  const stripHTML = htmlEntityDecoder(filterSpaces);\n  return stripHTML;\n};\n\n// strip entities for plainify\nconst htmlEntityDecoder = (htmlWithEntities: string) => {\n  const entityList: { [key: string]: string } = {\n    '&nbsp;': ' ',\n    '&lt;': '<',\n    '&gt;': '>',\n    '&amp;': '&',\n    '&quot;': '\"',\n    '&#39;': \"'\",\n  };\n  const htmlWithoutEntities: string = htmlWithEntities.replace(\n    /(&amp;|&lt;|&gt;|&quot;|&#39;)/g,\n    (entity: string): string => {\n      return entityList[entity];\n    }\n  );\n  return htmlWithoutEntities;\n};\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]}]},{"filePath":"/Users/gigi/Development/soveng/soveng2/src/pages/404.astro","messages":[{"ruleId":"max-len","severity":1,"message":"This line has a length of 105. Maximum allowed is 100.","line":23,"column":1,"nodeType":"Program","messageId":"max","endLine":23,"endColumn":106},{"ruleId":"max-len","severity":1,"message":"This line has a length of 101. Maximum allowed is 100.","line":27,"column":1,"nodeType":"Program","messageId":"max","endLine":27,"endColumn":102}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"---\nimport Base from \"@/layouts/Base.astro\";\n---\n\n<Base title=\"Page Not Found - Lost at Sea\">\n  <section class=\"section-sm text-center bg-black text-white min-h-screen flex items-center\">\n    <div class=\"container\">\n      <div class=\"row justify-center\">\n        <div class=\"sm:col-10 md:col-8 lg:col-6\">\n          <span\n            class=\"text-[8rem] block font-bold text-primary drop-shadow-lg\"\n            style=\"font-family: 'IM Fell Double Pica', serif;\"\n          >\n            404\n          </span>\n\n          <h1 class=\"h2 mb-4 text-primary\" style=\"font-family: 'IM Fell Double Pica', serif;\">\n            ARRR! Page Not Found, Matey!\n          </h1>\n\n          <div class=\"prose-content mb-8\">\n            <p class=\"text-lg text-white\">\n              Avast, adventurer! The chart ye followed ends here—this part o' the net be still uncharted.\n              Mayhap the page changed its bearings or slipped beneath the waves.\n            </p>\n            <p class=\"text-lg text-white mt-4\">\n              Fret not! Trim yer sails for the Home Port an' keep craftin' the future ye wish to see.\n            </p>\n          </div>\n\n          <a href=\"/\" class=\"btn-retro text-lg px-8 py-4 bg-primary hover:bg-primary/80 text-white font-bold border-2 border-primary/60 hover:border-primary/80 transition-all transform hover:scale-105\">\n            Back to Home Port\n          </a>\n\n          <!-- Pirate Ship ASCII Art -->\n          <div class=\"mt-16 text-primary font-mono text-sm\">\n            <pre class=\"text-center\">\n    🏴‍☠️\n     ⛵\n    ⛵⛵\n   ⛵⛵⛵\n  ⛵⛵⛵⛵\n ⛵⛵⛵⛵⛵\n            </pre>\n          </div>\n\n          <!-- Pirate Quote -->\n          <div class=\"mt-12 text-gray-300 italic\">\n            <p class=\"text-sm\">\n              \"It is a blessing for a man to have a hand in determining his own fate.\"\n              <br>\n              <span class=\"text-xs\">— Edward \"Blackbeard\" Teach</span>\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  </section>\n</Base>\n\n<style>\n  .btn-retro {\n    box-shadow: 4px 4px 0px rgba(0, 0, 0, 0.3);\n  }\n\n  .btn-retro:hover {\n    box-shadow: 2px 2px 0px rgba(0, 0, 0, 0.3);\n  }\n\n  .btn-retro:active {\n    transform: translateY(2px);\n    box-shadow: 1px 1px 0px rgba(0, 0, 0, 0.3);\n  }\n</style>\n","usedDeprecatedRules":[{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]}]},{"filePath":"/Users/gigi/Development/soveng/soveng2/src/pages/concept.astro","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":44,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2025,2028],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2025,2028],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":65,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2818,2821],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2818,2821],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":95,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":95,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3490,3493],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3490,3493],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"---\nimport Base from \"@/layouts/Base.astro\";\nimport ContentLead from \"@/layouts/components/ContentLead.astro\";\nimport ContentSection from \"@/layouts/components/ContentSection.astro\";\nimport slideLoop from \"@/assets/images/show-talk-build-loop.jpeg\";\nimport slideWalk from \"@/assets/images/walking.jpeg\";\nimport slideEndurance from \"@/assets/images/endurance.jpeg\";\nimport slideInPerson from \"@/assets/images/soveng-shirt.jpeg\";\nimport slideCypherpunks from \"@/assets/images/cypherpunks-write-code.jpeg\";\nimport slideWideOpenSea from \"@/assets/images/wide-open-sea.jpeg\";\nimport revealedOnWalkImage from \"@/assets/images/revealed-on-walk.jpg\";\nimport smoothSeaImage from \"@/assets/images/smooth-sea.jpg\";\nimport weeklyRhythmData from \"@/data/weeklyRhythm.json\";\nimport philosophyQuotes from \"@/data/philosophy-quotes.json\";\nimport type { CollectionEntry } from \"astro:content\";\nimport { getEntry } from \"astro:content\";\nimport weeklyLoopSchedule from \"@/assets/images/weekly-loop-schedule.png\";\nimport walkToTopImage from \"@/assets/images/walk-to-top.jpg\";\nimport demoDayImage from \"@/assets/images/demo-day.jpeg\";\nimport optOutImage from \"@/assets/images/opt-out.jpg\";\nimport madeiraImage from \"@/assets/images/madeira.jpg\";\nimport twoHoursConversationImage from \"@/assets/images/2-hours-of-conversation.jpeg\";\nimport stayWeirdImage from \"@/assets/images/stay-weird.jpg\";\nimport flowersImage from \"@/assets/images/flowers.jpg\";\nimport wwwLifePathImage from \"@/assets/images/www-life-path.png\";\n\n// Get concept content\nconst concept = (await getEntry(\n  \"concept\",\n  \"-index\"\n)) as CollectionEntry<\"concept\">;\n\nconst { title, meta_title, description, intro, sections } = concept.data;\n\n// Helper function to find quote by ID\nconst getQuoteById = (id: string) => {\n  return philosophyQuotes.find(q => q.id === id);\n};\n\n// Get the Berdyaev quote for the ContentLead\nconst leadQuote = getQuoteById(\"berdyaev-beginning-end\");\n\n// Map image filenames to imported slide objects (now optimized assets)\nconst slideMap: Record<string, any> = {\n  \"show-talk-build-loop.jpeg\": slideLoop,\n  \"walking.jpeg\": slideWalk,\n  \"endurance.jpeg\": slideEndurance,\n  \"soveng-shirt.jpeg\": slideInPerson,\n  \"cypherpunks-write-code.jpeg\": slideCypherpunks,\n  \"wide-open-sea.jpeg\": slideWideOpenSea,\n  \"revealed-on-walk.jpg\": revealedOnWalkImage,\n  \"smooth-sea.jpg\": smoothSeaImage,\n  \"weekly-loop-schedule.png\": weeklyLoopSchedule,\n  \"walk-to-top.jpg\": walkToTopImage,\n  \"demo-day.jpeg\": demoDayImage,\n  \"opt-out.jpg\": optOutImage,\n  \"madeira.jpg\": madeiraImage,\n  \"2-hours-of-conversation.jpeg\": twoHoursConversationImage,\n  \"stay-weird.jpg\": stayWeirdImage,\n  \"flowers.jpg\": flowersImage,\n  \"www-life-path.png\": wwwLifePathImage,\n};\n\n// Process sections to add special handling for weekly-loop\nconst processedSections = sections.map((section: any) => {\n  if (section.id === \"weekly-loop\") {\n    // Convert weekly rhythm schedule to bulletpoints\n    const scheduleBullets = weeklyRhythmData.schedule.map((item) =>\n      `**${item.day}** – ${item.description}`\n    );\n    return {\n      ...section,\n      bulletpoints: scheduleBullets\n    };\n  }\n  return section;\n});\n---\n\n<Base\n  title={title}\n  meta_title={meta_title}\n  description={description}\n>\n  <!-- Intro Lead Section -->\n  <ContentLead\n    title={title}\n    content={intro.content}\n    image={slideMap[intro.image]}\n    quote={leadQuote?.quote || \"\"}\n    author={leadQuote?.author || \"\"}\n  />\n\n  <!-- Content Sections -->\n  {processedSections.map((section: any, index: number) => (\n    <ContentSection\n      title={section.title}\n      content={section.content}\n      image={slideMap[section.image]}\n      index={index}\n      id={section.id}\n      bulletpoints={section.bulletpoints || []}\n      pullquote={{\n        quote: \"\",\n        author: \"\",\n        href: section.link\n      }}\n    />\n  ))}\n</Base>\n","usedDeprecatedRules":[{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]}]},{"filePath":"/Users/gigi/Development/soveng/soveng2/src/pages/faq.astro","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'cta' is assigned a value but never used.","line":17,"column":58,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":61},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":43,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1188,1191],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1188,1191],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"---\nimport Base from \"@/layouts/Base.astro\";\nimport ContentLead from \"@/layouts/components/ContentLead.astro\";\nimport ContentSection from \"@/layouts/components/ContentSection.astro\";\nimport FaqSection from \"@/layouts/components/FaqSection.astro\";\nimport philosophyQuotes from \"@/data/philosophy-quotes.json\";\nimport funchalImage from \"@/assets/images/funchal.jpg\";\nimport type { CollectionEntry } from \"astro:content\";\nimport { getEntry } from \"astro:content\";\n\n// Get FAQ content\nconst faq = (await getEntry(\n  \"faq\",\n  \"-index\"\n)) as CollectionEntry<\"faq\">;\n\nconst { title, meta_title, description, intro, sections, cta } = faq.data;\n\n// Helper function to find quote by ID\nconst getQuoteById = (id: string) => {\n  return philosophyQuotes.find(q => q.id === id);\n};\n\n// Get the T.S. Eliot quote for the ContentLead\nconst leadQuote = getQuoteById(\"ts-eliot\");\n---\n\n<Base\n  title={title}\n  meta_title={meta_title}\n  description={description}\n>\n  <!-- Intro Lead Section -->\n  <ContentLead\n    title={title}\n    content={intro.content}\n    image={funchalImage}\n    quote={leadQuote?.quote || \"\"}\n    author={leadQuote?.author || \"\"}\n  />\n\n  <!-- FAQ Sections -->\n  {sections.map((section: any, index: number) => (\n    section.questions ? (\n      <FaqSection\n        title={section.title}\n        questions={section.questions}\n        content={section.content}\n        index={index}\n        id={section.id}\n      />\n    ) : (\n      <ContentSection\n        title={section.title}\n        content={section.content}\n        image=\"\"\n        index={index}\n        id={section.id}\n        fullWidthImage={true}\n      />\n    )\n  ))}\n</Base>\n","usedDeprecatedRules":[{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]}]},{"filePath":"/Users/gigi/Development/soveng/soveng2/src/pages/index.astro","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ImageMod' is defined but never used.","line":3,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Win95Card' is defined but never used.","line":4,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'bannerContent' is assigned a value but never used.","line":49,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":20},{"ruleId":"max-len","severity":1,"message":"This line has a length of 101. Maximum allowed is 100.","line":135,"column":1,"nodeType":"Program","messageId":"max","endLine":135,"endColumn":102},{"ruleId":"@typescript-eslint/no-non-null-asserted-optional-chain","severity":2,"message":"Optional chain expressions can return undefined by design - using a non-null assertion is unsafe and wrong.","line":156,"column":22,"nodeType":"TSNonNullExpression","messageId":"noNonNullOptionalChain","endLine":156,"endColumn":82,"suggestions":[{"messageId":"suggestRemovingNonNull","fix":{"range":[5384,5385],"text":""},"desc":"You should remove the non-null assertion."}]},{"ruleId":"@typescript-eslint/no-non-null-asserted-optional-chain","severity":2,"message":"Optional chain expressions can return undefined by design - using a non-null assertion is unsafe and wrong.","line":157,"column":23,"nodeType":"TSNonNullExpression","messageId":"noNonNullOptionalChain","endLine":157,"endColumn":84,"suggestions":[{"messageId":"suggestRemovingNonNull","fix":{"range":[5469,5470],"text":""},"desc":"You should remove the non-null assertion."}]},{"ruleId":"@typescript-eslint/no-non-null-asserted-optional-chain","severity":2,"message":"Optional chain expressions can return undefined by design - using a non-null assertion is unsafe and wrong.","line":164,"column":22,"nodeType":"TSNonNullExpression","messageId":"noNonNullOptionalChain","endLine":164,"endColumn":79,"suggestions":[{"messageId":"suggestRemovingNonNull","fix":{"range":[5732,5733],"text":""},"desc":"You should remove the non-null assertion."}]},{"ruleId":"@typescript-eslint/no-non-null-asserted-optional-chain","severity":2,"message":"Optional chain expressions can return undefined by design - using a non-null assertion is unsafe and wrong.","line":165,"column":23,"nodeType":"TSNonNullExpression","messageId":"noNonNullOptionalChain","endLine":165,"endColumn":81,"suggestions":[{"messageId":"suggestRemovingNonNull","fix":{"range":[5814,5815],"text":""},"desc":"You should remove the non-null assertion."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"---\nimport { Image } from \"astro:assets\";\nimport ImageMod from \"@/components/ImageMod.astro\";\nimport Win95Card from \"@/components/Win95Card.astro\";\nimport Base from \"@/layouts/Base.astro\";\nimport FeatureSection from \"@/layouts/components/FeatureSection.astro\";\nimport BigBlockQuote from \"@/layouts/components/BigBlockQuote.astro\";\nimport { markdownify } from \"@/lib/utils/textConverter\";\nimport CallToAction from \"@/partials/CallToAction.astro\";\nimport Testimonial from \"@/partials/Testimonial.astro\";\nimport type { Button, Feature } from \"@/types\";\nimport type { CollectionEntry } from \"astro:content\";\nimport { getEntry } from \"astro:content\";\nimport weeklyRhythmData from \"@/data/weeklyRhythm.json\";\nimport philosophyQuotes from \"@/data/philosophy-quotes.json\";\n\n// Import optimized images (logo only - hero stays unoptimized for pixelated aesthetic)\nimport logoImage from \"@/assets/images/sec-05-sec-05-brandmark-white-rgb.svg\";\n\ninterface Homepage {\n  banner: {\n    title: string;\n    content: string;\n    image: string;\n    button: Button;\n  };\n  features: Feature[];\n}\n\nconst homepage = (await getEntry(\n  \"homepage\",\n  \"-index\"\n)) as CollectionEntry<\"homepage\">;\n\nconst testimonial = (await getEntry(\n  \"testimonialSection\",\n  \"testimonial\"\n)) as CollectionEntry<\"testimonialSection\">;\n\nconst call_to_action = (await getEntry(\n  \"ctaSection\",\n  \"call-to-action\"\n)) as CollectionEntry<\"ctaSection\">;\n\nconst { banner, features } = homepage.data as Homepage;\n\n// Pre-process markdown content\nconst bannerTitle = await markdownify(banner.title);\nconst bannerContent = await markdownify(banner.content);\n---\n\n<Base showCallToAction={false}>\n  <!-- Hero Section -->\n  <header class=\"h-screen w-full flex flex-col text-white relative bg-primary font-primary text-lg\">\n    <!-- Top Navigation / Logo Row -->\n    <div class=\"container pt-4 flex-shrink-0\">\n      <div class=\"flex items-center justify-between gap-3\">\n        <a href=\"/projects\" class=\"hover:underline whitespace-nowrap\">Build the tools.</a>\n        <Image\n          src={logoImage}\n          alt=\"Sovereign Engineering\"\n          class=\"w-[2.5rem] sm:w-[3rem]\"\n        />\n        <a href=\"/concept\" class=\"hover:underline whitespace-nowrap\">Ship the future.</a>\n      </div>\n    </div>\n\n    <!-- Hero Title -->\n    <div class=\"w-full text-center pt-4 flex-shrink-0\">\n      <h1 class=\"text-[calc(max(6vw, 4rem))] leading-none\">SOVEREIGN ENGINEERING</h1>\n    </div>\n\n    <!-- Main Content - Image -->\n    <main class=\"flex-grow flex items-center justify-center min-h-0\">\n      <img\n        src=\"/images/shining-city-in-cyberspace.png\"\n        alt=\"Person looking at a shining city in cyberspace\"\n        class=\"w-full h-auto max-h-full object-contain pointer-events-none\"\n        style={{ imageRendering: \"pixelated\", mixBlendMode: \"lighten\" }}\n        loading=\"eager\"\n      />\n    </main>\n\n    <!-- Subtitle Section -->\n    <div class=\"w-full text-center py-4 flex-shrink-0 mb-0\">\n      <div class=\"container\">\n        <div class=\"mx-auto w-3/4 md:text-4xl leading-none text-white text-balance\" set:html={bannerTitle}></div>\n      </div>\n    </div>\n\n    <!-- Call to Action Button and Bottom Text -->\n    <div class=\"w-full py-4 flex-shrink-0 mb-4\">\n      <div class=\"container\">\n        <div class=\"flex flex-col sm:flex-row justify-between items-center sm:gap-0 mt-8\">\n          <div class=\"text-center sm:text-left w-full sm:w-1/4 leading-none\">\n            <p class=\"m-0 text-balance\">\n              Six weeks of high-bandwidth ideation, dialogue, and experimentation.\n            </p>\n          </div>\n\n          <div class=\"text-center order-first sm:order-none mb-8 sm:mb-0\">\n            {\n              banner.button.enable && (\n                <a\n                  class=\"btn-retro px-8 py-4\"\n                  href={banner.button.link}\n                  target={\n                    banner.button.link.startsWith(\"http\") ? \"_blank\" : \"_self\"\n                  }\n                  rel=\"noopener\"\n                >\n                  {banner.button.label}\n                </a>\n              )\n            }\n          </div>\n\n          <div class=\"text-center sm:text-right w-full sm:w-1/4 leading-none\">\n            <p class=\"m-0 text-balance\">\n              Build applications and services for a self-sovereign future.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  </header>\n  <!-- /Hero Section -->\n\n  <!-- Features -->\n  {\n    features.map((feature, index: number) => {\n      // Handle weekly rhythm or regular bullet points\n      let bulletPoints: string[] = [];\n      if (feature.weeklyRhythm) {\n        bulletPoints = weeklyRhythmData.schedule.map(item => `**${item.day}:** ${item.description}`);\n      } else if (feature.bulletpoints) {\n        bulletPoints = feature.bulletpoints;\n      }\n\n      const sectionId = index === 0 ? \"what\" : index === 1 ? \"how\" : index === 2 ? \"why\" : \"\";\n\n      return (\n        <>\n          <FeatureSection\n            title={feature.title}\n            content={feature.content}\n            image={feature.image}\n            bulletpoints={bulletPoints}\n            button={feature.button}\n            index={index}\n            id={sectionId}\n          />\n          {/* Insert quote after the first feature */}\n          {index === 0 && (\n            <BigBlockQuote\n              quote={philosophyQuotes.find(q => q.id === \"saint-exupery\")?.quote!}\n              author={philosophyQuotes.find(q => q.id === \"saint-exupery\")?.author!}\n              href=\"/philosophy\"\n            />\n          )}\n          {/* Insert Hal Finney quote after the second feature */}\n          {index === 1 && (\n            <BigBlockQuote\n              quote={philosophyQuotes.find(q => q.id === \"hal-finney\")?.quote!}\n              author={philosophyQuotes.find(q => q.id === \"hal-finney\")?.author!}\n              href=\"/concept\"\n            />\n          )}\n        </>\n      );\n    })\n  }\n  <!-- /Features -->\n\n  <Testimonial testimonial={testimonial} />\n  <CallToAction call_to_action={call_to_action} />\n</Base>\n\n<style>\n  .showcase-logo {\n    filter: contrast(1000%) grayscale(100%);\n    image-rendering: pixelated;\n    image-rendering: crisp-edges;\n    transition: filter 0.3s ease;\n  }\n\n  .showcase-logo:hover {\n    filter: none;\n  }\n</style>\n","usedDeprecatedRules":[{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]}]},{"filePath":"/Users/gigi/Development/soveng/soveng2/src/pages/philosophy.astro","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'BigBlockQuote' is defined but never used.","line":3,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'slideExplorers' is defined but never used.","line":10,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'markdownify' is defined but never used.","line":19,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":37,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1746,1749],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1746,1749],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":67,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":67,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2584,2587],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2584,2587],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"---\nimport Base from \"@/layouts/Base.astro\";\nimport BigBlockQuote from \"@/layouts/components/BigBlockQuote.astro\";\nimport ContentSection from \"@/layouts/components/ContentSection.astro\";\nimport ContentLead from \"@/layouts/components/ContentLead.astro\";\nimport slideShip from \"@/assets/images/pirate-ship-2.jpeg\";\nimport slideFreedomTech from \"@/assets/images/surveillance-capitalism.jpeg\";\nimport slideWalk from \"@/assets/images/walking.jpeg\";\nimport slideEndurance from \"@/assets/images/endurance.jpeg\";\nimport slideExplorers from \"@/assets/images/pirate-ship-2.jpeg\";\nimport slideInPerson from \"@/assets/images/soveng-shirt.jpeg\";\nimport slideBias from \"@/assets/images/show-talk-build-loop.jpeg\";\nimport slideCypherpunks from \"@/assets/images/cypherpunks-write-code.jpeg\";\nimport slideWideOpenSea from \"@/assets/images/wide-open-sea.jpeg\";\nimport slideBellLabs from \"@/assets/images/bell-labs.jpeg\";\nimport slideSolvitur from \"@/assets/images/solvitur-ambulando.jpeg\";\nimport slideGenesisBlock from \"@/assets/images/genesis-block.png\";\nimport philosophyQuotes from \"@/data/philosophy-quotes.json\";\nimport { markdownify } from \"@/lib/utils/textConverter\";\nimport type { CollectionEntry } from \"astro:content\";\nimport { getEntry } from \"astro:content\";\n\n// Get philosophy content\nconst philosophy = (await getEntry(\n  \"philosophy\",\n  \"-index\"\n)) as CollectionEntry<\"philosophy\">;\n\nconst { title, meta_title, description, intro, sections } = philosophy.data;\n\n// Helper function to find quote by section (preserving existing quote system)\nconst getQuote = (section: string) => {\n  return philosophyQuotes.find(q => q.section === section);\n};\n\n// Map image filenames to imported slide objects (now optimized assets)\nconst slideMap: Record<string, any> = {\n  \"pirate-ship-2.jpeg\": slideShip,\n  \"surveillance-capitalism.jpeg\": slideFreedomTech,\n  \"walking.jpeg\": slideWalk,\n  \"endurance.jpeg\": slideEndurance,\n  \"soveng-shirt.jpeg\": slideInPerson,\n  \"show-talk-build-loop.jpeg\": slideBias,\n  \"cypherpunks-write-code.jpeg\": slideCypherpunks,\n  \"wide-open-sea.jpeg\": slideWideOpenSea,\n  \"bell-labs.jpeg\": slideBellLabs,\n  \"solvitur-ambulando.jpeg\": slideSolvitur,\n  \"genesis-block.png\": slideGenesisBlock,\n};\n---\n\n<Base\n  title={title}\n  meta_title={meta_title}\n  description={description}\n>\n  <!-- Intro Lead Section -->\n  <ContentLead\n    title={title}\n    content={intro.content}\n    image={slideMap[intro.image]}\n    quote={getQuote(intro.quote_section)?.quote || \"\"}\n    author={getQuote(intro.quote_section)?.author || \"\"}\n  />\n\n  <!-- Content Sections -->\n  {sections.map((section: any, index: number) => (\n    <ContentSection\n      title={section.title}\n      content={section.content}\n      image={slideMap[section.image]}\n      index={index}\n      pullquote={{\n        quote: getQuote(section.quote_section)?.quote || \"\",\n        author: getQuote(section.quote_section)?.author || \"\",\n        href: section.link\n      }}\n    />\n  ))}\n</Base>\n","usedDeprecatedRules":[{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]}]},{"filePath":"/Users/gigi/Development/soveng/soveng2/src/pages/podcast.astro","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ContentSection' is defined but never used.","line":4,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":22},{"ruleId":"max-len","severity":1,"message":"This line has a length of 397. Maximum allowed is 100.","line":8,"column":1,"nodeType":"Program","messageId":"max","endLine":8,"endColumn":398},{"ruleId":"max-len","severity":1,"message":"This line has a length of 108. Maximum allowed is 100.","line":10,"column":1,"nodeType":"Program","messageId":"max","endLine":10,"endColumn":109}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"---\nimport Base from \"@/layouts/Base.astro\";\nimport BigBlockQuote from \"@/layouts/components/BigBlockQuote.astro\";\nimport ContentSection from \"@/layouts/components/ContentSection.astro\";\nimport DynamicIcon from \"@/helpers/DynamicIcon\";\n\n// Meta-essence distilled manually from all episode notes\nconst metaParagraph = `Across a dozen walking dialogues the <strong>No Solutions</strong> crew keeps circling the same north star: <strong>freedom is an engineering practice</strong>. Start ugly, ship weekly, and invite the world's critique. Momentum replaces perfection, open protocols replace gate-keepers, and conversations on the trail turn wild ideas into code that empowers the individual.`;\n\nconst metaQuote = `Start ugly, iterate publicly, and keep walking—this is Sovereign Engineering in motion.`;\n\nconst pageTitle = \"No Solutions\";\nconst byline = `Walking towards a better internet since <a href=\"https://mempool.space/block/882690\" target=\"_blank\" rel=\"noopener noreferrer\">882,690</a>.`;\nconst pageDescription = \"No Solutions podcast\";\n\n---\n\n<Base title={pageTitle} description={pageDescription}>\n  <!-- Hero Section -->\n  <section class=\"section-sm bg-black text-white pt-[8rem]\">\n    <div class=\"container\">\n      <!-- Header -->\n      <div class=\"row justify-center\">\n        <div class=\"col-12 text-center\">\n          <a href=\"https://podcastindex.org/podcast/7206062\" target=\"_blank\" rel=\"noopener noreferrer\">\n            <img src=\"/images/nosolutions-cover.jpg\" alt=\"No Solutions Podcast Cover\" class=\"mx-auto mb-6 w-48 h-48 shadow-lg object-cover\" />\n          </a>\n          <h1 class=\"mb-4 text-white uppercase\" style=\"font-size: 3rem;\">{pageTitle}</h1>\n          <p class=\"text-xl font-primary uppercase tracking-wider mb-8 \" set:html={byline} />\n        </div>\n      </div>\n\n      <!-- Content Section -->\n      <div class=\"row justify-center\">\n        <div class=\"max-w-[960px] mx-auto\">\n          <div class=\"content [&>p]:text-xl [&>p]:text-white mb-12\">\n            <p set:html={metaParagraph} />\n          </div>\n        </div>\n      </div>\n\n\n      <!-- Platform Links -->\n      <div class=\"row justify-center\">\n        <div class=\"md:col-10 lg:col-8\">\n          <div class=\"flex flex-wrap justify-center gap-4 mb-12\">\n            <a\n              href=\"https://castr.me/npub1n00yy9y3704drtpph5wszen64w287nquftkcwcjv7gnnkpk2q54s73000n\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              class=\"btn-retro\"\n            >\n              castr.me\n            </a>\n            <a\n              href=\"https://podcastindex.org/podcast/7206062\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              class=\"btn-retro\"\n            >\n              Podcast Index\n            </a>\n            <a\n              href=\"https://sovereignengineering.io/dialogues.xml\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              class=\"btn-retro\"\n            >\n              <DynamicIcon icon=\"FaRss\" className=\"inline-block w-4 h-4 mr-2 align-text-bottom\" />\n              RSS\n            </a>\n            <a\n              href=\"https://njump.me/nosolutions@sovereignengineering.io\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              class=\"btn-retro\"\n            >\n              <DynamicIcon icon=\"FaFeather\" className=\"inline-block w-4 h-4\" />\n              <span class=\"sr-only\">Nostr Profile</span>\n            </a>\n          </div>\n        </div>\n      </div>\n\n      <!-- Centered Quote -->\n      <BigBlockQuote\n        quote={metaQuote}\n      />\n    </div>\n  </section>\n</Base>\n","usedDeprecatedRules":[{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]}]},{"filePath":"/Users/gigi/Development/soveng/soveng2/src/pages/projects.astro","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'philosophyQuotes' is defined but never used.","line":5,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":24}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"---\nimport Base from \"@/layouts/Base.astro\";\nimport ProjectShowcase from \"@/components/ProjectShowcase.astro\";\nimport showcaseProjects from \"@/data/showcaseProjects.js\";\nimport philosophyQuotes from \"@/data/philosophy-quotes.json\";\n---\n\n<Base\n  title=\"Demo Day Projects\"\n  meta_title=\"Demo Day Projects\"\n  description=\"Explore projects built by Sovereign Engineering Cohort participants during their Demo Days\"\n>\n  <ProjectShowcase\n    projects={showcaseProjects}\n    darkTheme={true}\n    showTitle={true}\n    showHighlights={true}\n  />\n</Base>\n","usedDeprecatedRules":[{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]}]},{"filePath":"/Users/gigi/Development/soveng/soveng2/src/tailwind-plugin/tw-bs-grid.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]}]},{"filePath":"/Users/gigi/Development/soveng/soveng2/src/tailwind-plugin/tw-theme.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]}]},{"filePath":"/Users/gigi/Development/soveng/soveng2/src/types/index.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-var-requires","replacedBy":["@typescript-eslint/no-require-imports"]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"spaced-comment","replacedBy":[]},{"ruleId":"no-confusing-arrow","replacedBy":[]}]}]
info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.
