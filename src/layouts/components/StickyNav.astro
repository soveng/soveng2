---
// Sticky navigation that appears after hero section
import menu from "@/config/menu.json";
const { main } = menu;
---

<nav id="sticky-nav" class="fixed top-0 left-0 right-0 z-50 bg-black border-b border-primary transform -translate-y-full transition-transform duration-300 ease-in-out">
  <div class="container py-4">
    <div class="flex items-center justify-between">
      <div class="flex items-center">
        <a href="/" class="flex items-center text-white hover:text-primary transition-colors">
          <img src="/images/sec-05-sec-05-brandmark-white-rgb.svg" alt="Sovereign Engineering Brandmark" class="w-8 h-8 mr-3" />
          <span class="font-bold uppercase" style="font-family: 'IM Fell Double Pica', Times, serif;">SOVEREIGN ENGINEERING</span>
        </a>
      </div>

      <div class="hidden md:flex items-center space-x-6">
        {
          main.map((menu) => {
            const isExternal = menu.url.startsWith('http') || menu.url.startsWith('mailto');

            return menu.hasChildren ? (
              <div class="group relative">
                <span class="text-white hover:text-primary transition-colors cursor-pointer flex items-center" style="font-family: 'IM Fell Double Pica', Times, serif;">
                  {menu.name}
                  <svg class="ml-1 w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                  </svg>
                </span>
                <div class="invisible absolute top-full left-0 mt-1 w-48 bg-gray-300 border-2 border-t-white border-l-white border-r-gray-600 border-b-gray-600 opacity-0 group-hover:visible group-hover:opacity-100 transition-all duration-200 z-50 shadow-lg">
                  {
                    menu.children?.map((child) => {
                      const isChildExternal = child.url.startsWith('http') || child.url.startsWith('mailto');
                      return (
                        <a
                          href={child.url}
                          class="block px-3 py-2 text-black hover:bg-primary hover:text-white transition-colors border-b border-gray-400 last:border-b-0 flex items-center justify-between"
                          style="font-family: 'IM Fell Double Pica', Times, serif;"
                          {...(isChildExternal && { target: "_blank", rel: "noopener noreferrer" })}
                        >
                          <span>{child.name}</span>
                          {isChildExternal && (
                            <svg class="w-3 h-3 ml-2 opacity-60" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                              <path d="M13 5H19V11"/>
                              <path d="M19 5L5 19"/>
                            </svg>
                          )}
                        </a>
                      );
                    })
                  }
                </div>
              </div>
            ) : (
              <a
                href={menu.url}
                class="text-white hover:text-primary transition-colors"
                style="font-family: 'IM Fell Double Pica', Times, serif;"
                {...(isExternal && { target: "_blank", rel: "noopener noreferrer" })}
              >
                {menu.name}
              </a>
            );
          })
        }
        <span class="btn-retro btn-retro-sm opacity-50 cursor-not-allowed">
          APPLICATIONS CLOSED
        </span>
      </div>

      <!-- Mobile menu button -->
      <button id="mobile-menu-btn" class="md:hidden text-white" aria-label="Toggle mobile menu" aria-expanded="false">
        <span class="sr-only">Open main menu</span>
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" aria-hidden="true">
          <line x1="3" y1="6" x2="21" y2="6"></line>
          <line x1="3" y1="12" x2="21" y2="12"></line>
          <line x1="3" y1="18" x2="21" y2="18"></line>
        </svg>
      </button>
    </div>

    <!-- Mobile menu -->
    <div id="mobile-menu" class="md:hidden hidden mt-3 pb-3 border-t border-primary pt-3">
      <div class="flex flex-col">
        {
          main.map((menu) => {
            const isExternal = menu.url.startsWith('http') || menu.url.startsWith('mailto');

            return menu.hasChildren ? (
              <>
                {menu.children?.map((child) => {
                  const isChildExternal = child.url.startsWith('http') || child.url.startsWith('mailto');
                  return (
                    <a
                      href={child.url}
                      class="text-white hover:text-primary hover:bg-white/10 transition-all py-2 px-4 text-base flex items-center justify-between"
                      style="font-family: 'IM Fell Double Pica', Times, serif;"
                      {...(isChildExternal && { target: "_blank", rel: "noopener noreferrer" })}
                    >
                      <span>{child.name}</span>
                      {isChildExternal && (
                        <svg class="w-4 h-4 opacity-60" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                          <path d="M13 5H19V11"/>
                          <path d="M19 5L5 19"/>
                        </svg>
                      )}
                    </a>
                  );
                })}
              </>
            ) : (
              // Skip What/How/Why links on mobile
              menu.name !== "What?" && menu.name !== "How?" && menu.name !== "Why?" && (
                <a
                  href={menu.url}
                  class="text-white hover:text-primary hover:bg-white/10 transition-all py-2 px-4 text-base"
                  style="font-family: 'IM Fell Double Pica', Times, serif;"
                  {...(isExternal && { target: "_blank", rel: "noopener noreferrer" })}
                >
                  {menu.name}
                </a>
              )
            );
          })
        }
        <div class="mt-3 px-4">
          <span class="btn-retro btn-retro-sm block text-center opacity-50 cursor-not-allowed">
            APPLICATIONS CLOSED
          </span>
        </div>
      </div>
    </div>
  </div>
</nav>

<script>
  // Intersection Observer for sticky navigation
  document.addEventListener('astro:page-load', () => {
    const stickyNav = document.getElementById('sticky-nav');
    const mobileMenuBtn = document.getElementById('mobile-menu-btn');
    const mobileMenu = document.getElementById('mobile-menu');

    if (!stickyNav) {return;}

    // Create observer for hero section
    const heroSection = document.querySelector('header');
    if (heroSection && heroSection.classList.contains('h-screen')) {
      // Only observe if it's the full-screen hero section
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              // Hero is visible, hide nav
              stickyNav.classList.add('-translate-y-full');
            } else {
              // Hero is not visible, show nav
              stickyNav.classList.remove('-translate-y-full');
            }
          });
        },
        {
          threshold: 0.1,
          rootMargin: '-10px 0px 0px 0px'
        }
      );

      observer.observe(heroSection);
    } else {
      // No hero section or not a full-screen hero, show nav immediately
      stickyNav.classList.remove('-translate-y-full');
    }

    // Mobile menu toggle
    if (mobileMenuBtn && mobileMenu) {
      mobileMenuBtn.addEventListener('click', () => {
        const isHidden = mobileMenu.classList.toggle('hidden');
        mobileMenuBtn.setAttribute('aria-expanded', !isHidden ? 'true' : 'false');
      });

      // Close mobile menu when clicking nav links
      const mobileLinks = mobileMenu.querySelectorAll('a');
      mobileLinks.forEach(link => {
        link.addEventListener('click', () => {
          mobileMenu.classList.add('hidden');
          mobileMenuBtn.setAttribute('aria-expanded', 'false');
        });
      });
    }
  });
</script>
